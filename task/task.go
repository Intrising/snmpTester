package task

import (
	"fmt"
	"strings"

	"../utils"
)

// Task is the task descirbed each snmp command and result
type Task struct {
	name     string
	taskType int //  0 = "get", 1 = "walk", 2 = "set" 	, 3 = "walkSet"
	oid      string

	getCmd  string
	walkCmd string
	setCmd  string

	valtype               string
	defaultVal            []string
	rawResult             string
	rawResultafterSet     string
	rawResultAfterDefault string
	testSuccess           string
	failedReason          string
	failedtype            string
}

var taskEntry []*Task
var testValMap map[string]string

func (t *Task) failed(reason string) {
	t.testSuccess = cross
	t.failedReason = reason
	stats.AddFailed()
	if len(t.failedtype) > 0 {
		stats.AddMarked()
	} else {
		stats.AddunmarkedOID(t.oid)
	}
}

func (t *Task) success() {
	t.testSuccess = check
	stats.AddPass()
}

func (t *Task) init(taskName, oid string) {
	t.name = taskName
	t.taskType = parseTaskTypeFromCmd(oid)
	t.valtype = parseValTypeFromCmd(oid)
	t.failedtype = parseFailedType(oid)

	// parse oid
	oid = rmPostFix(oid)
	if strings.Contains(oid, privateMibOid) {
		// private privateMibOid
		t.oid = strings.Split(oid, privateMibOid)[1]
	} else if strings.Contains(oid, mib2Prefix) {
		// rfc4318 oid prefix
		t.oid = strings.Split(oid, mib2Prefix)[1]
	}

	// parse cmd
	if t.taskType == typeGet {
		t.getCmd = snmpGetPrefix + oid
	} else if t.taskType == typeWalk {
		t.walkCmd = snmpWalkPrefix + oid
	} else if t.taskType == typeSet {
		// We need to test all oid by get, and some oid has the read-write access, so we store the set cmd in task.setCmd
		//
		t.getCmd = snmpGetPrefix + oid
		t.setCmd = snmpSetPrefix + oid + t.valtype + testValMap[t.valtype]
	} else if t.taskType == typeWalkSet {
		t.walkCmd = snmpWalkPrefix + oid
		// @@Todo: handle the condition of walk and set
		// t.setCmd = snmpSetPrefix + oid + t.valtype + testValMap[t.valtype]
	}

}

// Exec executes the task
func (t *Task) Exec() {
	fmt.Println("================================ type is ", taskTranslator(t.taskType))

	if isGet(t) {
		err, result := utils.ShellExec(t.getCmd)
		t.rawResult = result
		if err != nil {
			fmt.Println("exec error ", err)
		}
	} else if isWalk(t) {
		err, result := utils.ShellExec(t.walkCmd)
		if err != nil {
			fmt.Println("exec error ", err)
		}
		// work around to fix the issue that snpmwalk after snmpget will lead to the result that nothingInThisOID
		err, result = utils.ShellExec(t.walkCmd)
		if err != nil {
			fmt.Println("exec error ", err)
		}
		t.rawResult = result
	}

	t.handleFirstGet()
	t.printResult()

}

func (t *Task) handleFirstGet() {
	// fmt.Println("handleRawVal")
	// fmt.Println("Raw lines is =>", strings.Split(t.rawResult, "\n")[0])

	if probe(t.rawResult, nothingInThisOID) {
		t.failed(nothingInThisOID)
		return
	}

	// Check the value type first
	if t.valtype == "string" && !probe(t.rawResult, "STRING:") {
		t.failed("Expect type string, but probe other type")
		return
	} else if t.valtype == "integer" && !probe(t.rawResult, "INTEGER:") && !probe(t.rawResult, "Counter32:") {
		t.failed("Expect type integer, but probe other type")
		return
	} else if t.valtype == "ipaddress" && !probe(t.rawResult, "IPADDRESS:") {
		t.failed("Expect type ipaddress, but probe other type")
		return
	}

	// Parse all the value from snmpwalk line by line
	if isWalk(t) {
		lines := strings.Split(t.rawResult, "\n")
		for _, line := range lines {
			// fmt.Println("line is ", line)
			if probe(line, "STRING: ") {
				val := strings.Split(line, "STRING: ")[1]
				val = strings.Replace(val, "\"", "", -1)
				t.defaultVal = append(t.defaultVal, val)
			} else if probe(line, "INTEGER:") {
				val := strings.Split(line, "INTEGER: ")[1]
				t.defaultVal = append(t.defaultVal, val)
			} else if probe(line, "Counter32:") {
				val := strings.Split(line, "Counter32: ")[1]
				t.defaultVal = append(t.defaultVal, val)
			}
		}
		t.success()

	} else if isGet(t) {
		if probe(t.rawResult, "STRING:") {
			val := strings.Split(t.rawResult, "STRING: ")[1]
			val = strings.Replace(val, "\"", "", -1)
			t.defaultVal = []string{val}
			t.success()
		} else if probe(t.rawResult, "INTEGER:") {
			val := strings.Split(t.rawResult, "INTEGER: ")[1]
			t.defaultVal = []string{val}
			t.success()
		} else if probe(t.rawResult, "Counter32:") {
			val := strings.Split(t.rawResult, "Counter32: ")[1]
			t.defaultVal = []string{val}
			t.success()
		}
	}
}

func (t *Task) printResult() {
	// fmt.Println("Raw Val is => ", t.rawResult)
	fmt.Println("Name:   ", t.name)
	fmt.Println("oid:    ", t.oid)
	if isGet(t) {
		fmt.Println("GetCmd:  ", t.getCmd)
	} else if isWalk(t) {
		fmt.Println("WalkCmd: ", t.walkCmd)
	}
	fmt.Println("GET "+t.name+" ===== >", t.defaultVal)
	fmt.Println("\n")
	fmt.Println("Test pass: ", t.testSuccess)
	if t.testSuccess == cross {
		if len(t.failedtype) > 0 {
			fmt.Println("Failed type:    ", failedTypeTranlator(t.failedtype))
		}
		fmt.Println("Failed reaseon: ", t.failedReason)
		fmt.Println("Raw Val is => ", t.rawResult)
	}
}

func probe(mainString, subString string) bool {
	return strings.Contains(mainString, subString)
}

func isGet(t *Task) bool {
	return t.taskType == typeGet || t.taskType == typeSet
}

func isWalk(t *Task) bool {
	return t.taskType == typeWalk || t.taskType == typeWalkSet
}

func isSet(t *Task) bool {
	return t.taskType == typeWalkSet || t.taskType == typeSet
}

func taskTranslator(typeInt int) string {
	if typeInt == typeGet {
		return "get"
	} else if typeInt == typeWalk {
		return "walk"
	} else if typeInt == typeSet {
		return "set"
	} else if typeInt == typeWalkSet {
		return "walkSet"
	}
	return "sth wrong"
}

func parseTaskTypeFromCmd(oid string) int {
	if strings.Contains(oid, "-w-s") {
		return typeWalkSet
	} else if strings.Contains(oid, "-w") {
		return typeWalk
	} else if strings.Contains(oid, "-s") {
		return typeSet
	}
	return typeGet
}

func genTask(name, oid string) *Task {
	t := new(Task)
	t.init(name, oid)
	return t
}

func parseValTypeFromCmd(oid string) string {
	if strings.Contains(oid, "@i") && !strings.Contains(oid, "@ip") {
		return strings.TrimSpace(snmpSetTypeInt)
	} else if strings.Contains(oid, "@s") {
		return strings.TrimSpace(snmpSetTypeString)
	} else if strings.Contains(oid, "@ip") {
		return strings.TrimSpace(snmpSetTypeIpaddr)
	}
	return "sthing wrong"
}

func parsePSFromCmd(oid string) string {
	if strings.Contains(oid, "-ps:") {
		return strings.Split(oid, "-ps:")[1]
	}
	return ""
}

func failedTypeTranlator(from string) string {
	switch from {
	case "1":
		return "Need to set value to the device, or connect to another device to get the value."
	case "2":
		return "Spec issue"
	case "3":
		return "snmp program issue"
	case "4":
		return "Device not support"
	default:
		return ""
	}
}

func parseFailedType(oid string) string {
	if strings.Contains(oid, "-m:") {
		return strings.Split(oid, "-m:")[1]
	}
	return ""
}

func rmPostFix(oid string) string {
	return strings.Split(oid, "@")[0]
}

// GetTaskEntry return the init taskEntry
func GetTaskEntry() []*Task {
	return taskEntry
}

func init() {
	testValMap = make(map[string]string)
	testValMap["string"] = "testWalter"
	testValMap["integer"] = "20"

	// taskEntry = append(taskEntry, genTask("etherStatsIndex", etherStatsIndex))
	// taskEntry = append(taskEntry, genTask("etherStatsDataSource", etherStatsDataSource))
	// taskEntry = append(taskEntry, genTask("etherStatsDropEvents", etherStatsDropEvents))
	// taskEntry = append(taskEntry, genTask("etherStatsOctets", etherStatsOctets))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts", etherStatsPkts))
	// taskEntry = append(taskEntry, genTask("etherStatsBroadcastPkts", etherStatsBroadcastPkts))
	// taskEntry = append(taskEntry, genTask("etherStatsMulticastPkts", etherStatsMulticastPkts))
	// taskEntry = append(taskEntry, genTask("etherStatsCRCAlignErrors", etherStatsCRCAlignErrors))
	// taskEntry = append(taskEntry, genTask("etherStatsUndersizePkts", etherStatsUndersizePkts))
	// taskEntry = append(taskEntry, genTask("etherStatsOversizePkts", etherStatsOversizePkts))
	// taskEntry = append(taskEntry, genTask("etherStatsFragments", etherStatsFragments))
	// taskEntry = append(taskEntry, genTask("etherStatsJabbers", etherStatsJabbers))
	// taskEntry = append(taskEntry, genTask("etherStatsCollisions", etherStatsCollisions))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts64Octets", etherStatsPkts64Octets))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts65to127Octets", etherStatsPkts65to127Octets))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts128to255Octets", etherStatsPkts128to255Octets))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts256to511Octets", etherStatsPkts256to511Octets))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts512to1023Octets", etherStatsPkts512to1023Octets))
	// taskEntry = append(taskEntry, genTask("etherStatsPkts1024to1518Octets", etherStatsPkts1024to1518Octets))
	// taskEntry = append(taskEntry, genTask("etherStatsOwner", etherStatsOwner))
	// taskEntry = append(taskEntry, genTask("etherStatsStatus", etherStatsStatus))
	// taskEntry = append(taskEntry, genTask("historyControlIndex", historyControlIndex))
	// taskEntry = append(taskEntry, genTask("historyControlDataSource", historyControlDataSource))
	// taskEntry = append(taskEntry, genTask("historyControlBucketsRequested", historyControlBucketsRequested))
	// taskEntry = append(taskEntry, genTask("historyControlBucketsGranted", historyControlBucketsGranted))
	// taskEntry = append(taskEntry, genTask("historyControlInterval", historyControlInterval))
	// taskEntry = append(taskEntry, genTask("historyControlOwner", historyControlOwner))
	// taskEntry = append(taskEntry, genTask("historyControlStatus", historyControlStatus))
	// taskEntry = append(taskEntry, genTask("etherHistoryIndex", etherHistoryIndex))
	// taskEntry = append(taskEntry, genTask("etherHistorySampleIndex", etherHistorySampleIndex))
	// taskEntry = append(taskEntry, genTask("etherHistoryIntervalStart", etherHistoryIntervalStart))
	// taskEntry = append(taskEntry, genTask("etherHistoryDropEvents", etherHistoryDropEvents))
	// taskEntry = append(taskEntry, genTask("etherHistoryOctets", etherHistoryOctets))
	// taskEntry = append(taskEntry, genTask("etherHistoryPkts", etherHistoryPkts))
	// taskEntry = append(taskEntry, genTask("etherHistoryBroadcastPkts", etherHistoryBroadcastPkts))
	// taskEntry = append(taskEntry, genTask("etherHistoryMulticastPkts", etherHistoryMulticastPkts))
	// taskEntry = append(taskEntry, genTask("etherHistoryCRCAlignErrors", etherHistoryCRCAlignErrors))
	// taskEntry = append(taskEntry, genTask("etherHistoryUndersizePkts", etherHistoryUndersizePkts))
	// taskEntry = append(taskEntry, genTask("etherHistoryOversizePkts", etherHistoryOversizePkts))
	// taskEntry = append(taskEntry, genTask("etherHistoryFragments", etherHistoryFragments))
	// taskEntry = append(taskEntry, genTask("etherHistoryJabbers", etherHistoryJabbers))
	// taskEntry = append(taskEntry, genTask("etherHistoryCollisions", etherHistoryCollisions))
	// taskEntry = append(taskEntry, genTask("etherHistoryUtilization", etherHistoryUtilization))
	// taskEntry = append(taskEntry, genTask("alarmIndex", alarmIndex))
	// taskEntry = append(taskEntry, genTask("alarmInterval", alarmInterval))
	// taskEntry = append(taskEntry, genTask("alarmVariable", alarmVariable))
	// taskEntry = append(taskEntry, genTask("alarmSampleType", alarmSampleType))
	// taskEntry = append(taskEntry, genTask("alarmValue", alarmValue))
	// taskEntry = append(taskEntry, genTask("alarmStartupAlarm", alarmStartupAlarm))
	// taskEntry = append(taskEntry, genTask("alarmRisingThreshold", alarmRisingThreshold))
	// taskEntry = append(taskEntry, genTask("alarmFallingThreshold", alarmFallingThreshold))
	// taskEntry = append(taskEntry, genTask("alarmRisingEventIndex", alarmRisingEventIndex))
	// taskEntry = append(taskEntry, genTask("alarmFallingEventIndex", alarmFallingEventIndex))
	// taskEntry = append(taskEntry, genTask("alarmOwner", alarmOwner))
	// taskEntry = append(taskEntry, genTask("alarmStatus", alarmStatus))
	// taskEntry = append(taskEntry, genTask("hostControlIndex", hostControlIndex))
	// taskEntry = append(taskEntry, genTask("hostControlDataSource", hostControlDataSource))
	// taskEntry = append(taskEntry, genTask("hostControlTableSize", hostControlTableSize))
	// taskEntry = append(taskEntry, genTask("hostControlLastDeleteTime", hostControlLastDeleteTime))
	// taskEntry = append(taskEntry, genTask("hostControlOwner", hostControlOwner))
	// taskEntry = append(taskEntry, genTask("hostControlStatus", hostControlStatus))
	// taskEntry = append(taskEntry, genTask("hostAddress", hostAddress))
	// taskEntry = append(taskEntry, genTask("hostCreationOrder", hostCreationOrder))
	// taskEntry = append(taskEntry, genTask("hostIndex", hostIndex))
	// taskEntry = append(taskEntry, genTask("hostInPkts", hostInPkts))
	// taskEntry = append(taskEntry, genTask("hostOutPkts", hostOutPkts))
	// taskEntry = append(taskEntry, genTask("hostInOctets", hostInOctets))
	// taskEntry = append(taskEntry, genTask("hostOutOctets", hostOutOctets))
	// taskEntry = append(taskEntry, genTask("hostOutErrors", hostOutErrors))
	// taskEntry = append(taskEntry, genTask("hostOutBroadcastPkts", hostOutBroadcastPkts))
	// taskEntry = append(taskEntry, genTask("hostOutMulticastPkts", hostOutMulticastPkts))
	// taskEntry = append(taskEntry, genTask("hostTimeAddress", hostTimeAddress))
	// taskEntry = append(taskEntry, genTask("hostTimeCreationOrder", hostTimeCreationOrder))
	// taskEntry = append(taskEntry, genTask("hostTimeIndex", hostTimeIndex))
	// taskEntry = append(taskEntry, genTask("hostTimeInPkts", hostTimeInPkts))
	// taskEntry = append(taskEntry, genTask("hostTimeOutPkts", hostTimeOutPkts))
	// taskEntry = append(taskEntry, genTask("hostTimeInOctets", hostTimeInOctets))
	// taskEntry = append(taskEntry, genTask("hostTimeOutOctets", hostTimeOutOctets))
	// taskEntry = append(taskEntry, genTask("hostTimeOutErrors", hostTimeOutErrors))
	// taskEntry = append(taskEntry, genTask("hostTimeOutBroadcastPkts", hostTimeOutBroadcastPkts))
	// taskEntry = append(taskEntry, genTask("hostTimeOutMulticastPkts", hostTimeOutMulticastPkts))
	// taskEntry = append(taskEntry, genTask("hostTopNControlIndex", hostTopNControlIndex))
	// taskEntry = append(taskEntry, genTask("hostTopNHostIndex", hostTopNHostIndex))
	// taskEntry = append(taskEntry, genTask("hostTopNRateBase", hostTopNRateBase))
	// taskEntry = append(taskEntry, genTask("hostTopNTimeRemaining", hostTopNTimeRemaining))
	// taskEntry = append(taskEntry, genTask("hostTopNDuration", hostTopNDuration))
	// taskEntry = append(taskEntry, genTask("hostTopNRequestedSize", hostTopNRequestedSize))
	// taskEntry = append(taskEntry, genTask("hostTopNGrantedSize", hostTopNGrantedSize))
	// taskEntry = append(taskEntry, genTask("hostTopNStartTime", hostTopNStartTime))
	// taskEntry = append(taskEntry, genTask("hostTopNOwner", hostTopNOwner))
	// taskEntry = append(taskEntry, genTask("hostTopNStatus", hostTopNStatus))
	// taskEntry = append(taskEntry, genTask("hostTopNReport", hostTopNReport))
	// taskEntry = append(taskEntry, genTask("hostTopNIndex", hostTopNIndex))
	// taskEntry = append(taskEntry, genTask("hostTopNAddress", hostTopNAddress))
	// taskEntry = append(taskEntry, genTask("hostTopNRate", hostTopNRate))
	// taskEntry = append(taskEntry, genTask("matrixControlIndex", matrixControlIndex))
	// taskEntry = append(taskEntry, genTask("matrixControlDataSource", matrixControlDataSource))
	// taskEntry = append(taskEntry, genTask("matrixControlTableSize", matrixControlTableSize))
	// taskEntry = append(taskEntry, genTask("matrixControlLastDeleteTime", matrixControlLastDeleteTime))
	// taskEntry = append(taskEntry, genTask("matrixControlOwner", matrixControlOwner))
	// taskEntry = append(taskEntry, genTask("matrixControlStatus", matrixControlStatus))
	// taskEntry = append(taskEntry, genTask("matrixSDSourceAddress", matrixSDSourceAddress))
	// taskEntry = append(taskEntry, genTask("matrixSDDestAddress", matrixSDDestAddress))
	// taskEntry = append(taskEntry, genTask("matrixSDIndex", matrixSDIndex))
	// taskEntry = append(taskEntry, genTask("matrixSDPkts", matrixSDPkts))
	// taskEntry = append(taskEntry, genTask("matrixSDOctets", matrixSDOctets))
	// taskEntry = append(taskEntry, genTask("matrixSDErrors", matrixSDErrors))
	// taskEntry = append(taskEntry, genTask("matrixDSSourceAddress", matrixDSSourceAddress))
	// taskEntry = append(taskEntry, genTask("matrixDSDestAddress", matrixDSDestAddress))
	// taskEntry = append(taskEntry, genTask("matrixDSIndex", matrixDSIndex))
	// taskEntry = append(taskEntry, genTask("matrixDSPkts", matrixDSPkts))
	// taskEntry = append(taskEntry, genTask("matrixDSOctets", matrixDSOctets))
	// taskEntry = append(taskEntry, genTask("matrixDSErrors", matrixDSErrors))
	// taskEntry = append(taskEntry, genTask("filterIndex", filterIndex))
	// taskEntry = append(taskEntry, genTask("filterChannelIndex", filterChannelIndex))
	// taskEntry = append(taskEntry, genTask("filterPktDataOffset", filterPktDataOffset))
	// taskEntry = append(taskEntry, genTask("filterPktData", filterPktData))
	// taskEntry = append(taskEntry, genTask("filterPktDataMask", filterPktDataMask))
	// taskEntry = append(taskEntry, genTask("filterPktDataNotMask", filterPktDataNotMask))
	// taskEntry = append(taskEntry, genTask("filterPktStatus", filterPktStatus))
	// taskEntry = append(taskEntry, genTask("filterPktStatusMask", filterPktStatusMask))
	// taskEntry = append(taskEntry, genTask("filterPktStatusNotMask", filterPktStatusNotMask))
	// taskEntry = append(taskEntry, genTask("filterOwner", filterOwner))
	// taskEntry = append(taskEntry, genTask("filterStatus", filterStatus))
	// taskEntry = append(taskEntry, genTask("channelIndex", channelIndex))
	// taskEntry = append(taskEntry, genTask("channelIfIndex", channelIfIndex))
	// taskEntry = append(taskEntry, genTask("channelAcceptType", channelAcceptType))
	// taskEntry = append(taskEntry, genTask("channelDataControl", channelDataControl))
	// taskEntry = append(taskEntry, genTask("channelTurnOnEventIndex", channelTurnOnEventIndex))
	// taskEntry = append(taskEntry, genTask("channelTurnOffEventIndex", channelTurnOffEventIndex))
	// taskEntry = append(taskEntry, genTask("channelEventIndex", channelEventIndex))
	// taskEntry = append(taskEntry, genTask("channelEventStatus", channelEventStatus))
	// taskEntry = append(taskEntry, genTask("channelMatches", channelMatches))
	// taskEntry = append(taskEntry, genTask("channelDescription", channelDescription))
	// taskEntry = append(taskEntry, genTask("channelOwner", channelOwner))
	// taskEntry = append(taskEntry, genTask("channelStatus", channelStatus))
	// taskEntry = append(taskEntry, genTask("bufferControlIndex", bufferControlIndex))
	// taskEntry = append(taskEntry, genTask("bufferControlChannelIndex", bufferControlChannelIndex))
	// taskEntry = append(taskEntry, genTask("bufferControlFullStatus", bufferControlFullStatus))
	// taskEntry = append(taskEntry, genTask("bufferControlFullAction", bufferControlFullAction))
	// taskEntry = append(taskEntry, genTask("bufferControlCaptureSliceSize", bufferControlCaptureSliceSize))
	// taskEntry = append(taskEntry, genTask("bufferControlDownloadSliceSize", bufferControlDownloadSliceSize))
	// taskEntry = append(taskEntry, genTask("bufferControlDownloadOffset", bufferControlDownloadOffset))
	// taskEntry = append(taskEntry, genTask("bufferControlMaxOctetsRequested", bufferControlMaxOctetsRequested))
	// taskEntry = append(taskEntry, genTask("bufferControlMaxOctetsGranted", bufferControlMaxOctetsGranted))
	// taskEntry = append(taskEntry, genTask("bufferControlCapturedPackets", bufferControlCapturedPackets))
	// taskEntry = append(taskEntry, genTask("bufferControlTurnOnTime", bufferControlTurnOnTime))
	// taskEntry = append(taskEntry, genTask("bufferControlOwner", bufferControlOwner))
	// taskEntry = append(taskEntry, genTask("bufferControlStatus", bufferControlStatus))
	// taskEntry = append(taskEntry, genTask("captureBufferControlIndex", captureBufferControlIndex))
	// taskEntry = append(taskEntry, genTask("captureBufferIndex", captureBufferIndex))
	// taskEntry = append(taskEntry, genTask("captureBufferPacketID", captureBufferPacketID))
	// taskEntry = append(taskEntry, genTask("captureBufferPacketData", captureBufferPacketData))
	// taskEntry = append(taskEntry, genTask("captureBufferPacketLength", captureBufferPacketLength))
	// taskEntry = append(taskEntry, genTask("captureBufferPacketTime", captureBufferPacketTime))
	// taskEntry = append(taskEntry, genTask("captureBufferPacketStatus", captureBufferPacketStatus))
	// taskEntry = append(taskEntry, genTask("eventIndex", eventIndex))
	// taskEntry = append(taskEntry, genTask("eventDescription", eventDescription))
	// taskEntry = append(taskEntry, genTask("eventType", eventType))
	// taskEntry = append(taskEntry, genTask("eventCommunity", eventCommunity))
	// taskEntry = append(taskEntry, genTask("eventLastTimeSent", eventLastTimeSent))
	// taskEntry = append(taskEntry, genTask("eventOwner", eventOwner))
	// taskEntry = append(taskEntry, genTask("eventStatus", eventStatus))
	// taskEntry = append(taskEntry, genTask("logEventIndex", logEventIndex))
	// taskEntry = append(taskEntry, genTask("logIndex", logIndex))
	// taskEntry = append(taskEntry, genTask("logTime", logTime))
	// taskEntry = append(taskEntry, genTask("logDescription", logDescription))

	// taskEntry = append(taskEntry, genTask("mplsTunnelConfigured", mplsTunnelConfigured))
	// taskEntry = append(taskEntry, genTask("mplsTunnelActive", mplsTunnelActive))
	// taskEntry = append(taskEntry, genTask("mplsTunnelTEDistProto", mplsTunnelTEDistProto))
	// taskEntry = append(taskEntry, genTask("mplsTunnelMaxHops", mplsTunnelMaxHops))
	// taskEntry = append(taskEntry, genTask("mplsTunnelNotificationMaxRate", mplsTunnelNotificationMaxRate))

	// taskEntry = append(taskEntry, genTask("mplsTunnelIndexNext", mplsTunnelIndexNext))
	// taskEntry = append(taskEntry, genTask("mplsTunnelName", mplsTunnelName))
	// taskEntry = append(taskEntry, genTask("mplsTunnelDescr", mplsTunnelDescr))
	// taskEntry = append(taskEntry, genTask("mplsTunnelIsIf", mplsTunnelIsIf))
	// taskEntry = append(taskEntry, genTask("mplsTunnelIfIndex", mplsTunnelIfIndex))
	// taskEntry = append(taskEntry, genTask("mplsTunnelOwner", mplsTunnelOwner))
	// taskEntry = append(taskEntry, genTask("mplsTunnelRole", mplsTunnelRole))
	// taskEntry = append(taskEntry, genTask("mplsTunnelXCPointer", mplsTunnelXCPointer))
	// taskEntry = append(taskEntry, genTask("mplsTunnelSignallingProto", mplsTunnelSignallingProto))
	// taskEntry = append(taskEntry, genTask("mplsTunnelSetupPrio", mplsTunnelSetupPrio))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHoldingPrio", mplsTunnelHoldingPrio))
	// taskEntry = append(taskEntry, genTask("mplsTunnelSessionAttributes", mplsTunnelSessionAttributes))
	// taskEntry = append(taskEntry, genTask("mplsTunnelLocalProtectInUse", mplsTunnelLocalProtectInUse))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourcePointer", mplsTunnelResourcePointer))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPrimaryInstance", mplsTunnelPrimaryInstance))
	// taskEntry = append(taskEntry, genTask("mplsTunnelInstancePriority", mplsTunnelInstancePriority))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopTableIndex", mplsTunnelHopTableIndex))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPathInUse", mplsTunnelPathInUse))
	// taskEntry = append(taskEntry, genTask("mplsTunnelARHopTableIndex", mplsTunnelARHopTableIndex))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopTableIndex", mplsTunnelCHopTableIndex))
	// taskEntry = append(taskEntry, genTask("mplsTunnelIncludeAnyAffinity", mplsTunnelIncludeAnyAffinity))
	// taskEntry = append(taskEntry, genTask("mplsTunnelIncludeAllAffinity", mplsTunnelIncludeAllAffinity))
	// taskEntry = append(taskEntry, genTask("mplsTunnelExcludeAnyAffinity", mplsTunnelExcludeAnyAffinity))
	// taskEntry = append(taskEntry, genTask("mplsTunnelTotalUpTime", mplsTunnelTotalUpTime))
	// taskEntry = append(taskEntry, genTask("mplsTunnelInstanceUpTime", mplsTunnelInstanceUpTime))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPrimaryUpTime", mplsTunnelPrimaryUpTime))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPathChanges", mplsTunnelPathChanges))
	// taskEntry = append(taskEntry, genTask("mplsTunnelLastPathChange", mplsTunnelLastPathChange))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCreationTime", mplsTunnelCreationTime))
	// taskEntry = append(taskEntry, genTask("mplsTunnelStateTransitions", mplsTunnelStateTransitions))
	// taskEntry = append(taskEntry, genTask("mplsTunnelAdminStatus", mplsTunnelAdminStatus))
	// taskEntry = append(taskEntry, genTask("mplsTunnelOperStatus", mplsTunnelOperStatus))
	// taskEntry = append(taskEntry, genTask("mplsTunnelRowStatus", mplsTunnelRowStatus))
	// taskEntry = append(taskEntry, genTask("mplsTunnelStorageType", mplsTunnelStorageType))

	// taskEntry = append(taskEntry, genTask("mplsTunnelHopListIndexNext", mplsTunnelHopListIndexNext))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopAddrType", mplsTunnelHopAddrType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopIPAddr", mplsTunnelHopIPAddr))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopIPPrefixLen", mplsTunnelHopIPPrefixLen))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopAsNumber", mplsTunnelHopAsNumber))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopAddrUnnum", mplsTunnelHopAddrUnnum))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopLspID", mplsTunnelHopLspID))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopType", mplsTunnelHopType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopInclude", mplsTunnelHopInclude))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopPathOptionName", mplsTunnelHopPathOptionName))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopEntryPathComp", mplsTunnelHopEntryPathComp))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopRowStatus", mplsTunnelHopRowStatus))
	// taskEntry = append(taskEntry, genTask("mplsTunnelHopStorageType", mplsTunnelHopStorageType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceIndexNext", mplsTunnelResourceIndexNext))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceMaxRate", mplsTunnelResourceMaxRate))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceMeanRate", mplsTunnelResourceMeanRate))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceMaxBurstSize", mplsTunnelResourceMaxBurstSize))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceMeanBurstSize", mplsTunnelResourceMeanBurstSize))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceExBurstSize", mplsTunnelResourceExBurstSize))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceFrequency", mplsTunnelResourceFrequency))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceWeight", mplsTunnelResourceWeight))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceRowStatus", mplsTunnelResourceRowStatus))
	// taskEntry = append(taskEntry, genTask("mplsTunnelResourceStorageType", mplsTunnelResourceStorageType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelARHopAddrType", mplsTunnelARHopAddrType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelARHopIPAddr", mplsTunnelARHopIPAddr))
	// taskEntry = append(taskEntry, genTask("mplsTunnelARHopAddrUnnum", mplsTunnelARHopAddrUnnum))
	// taskEntry = append(taskEntry, genTask("mplsTunnelARHopLspID", mplsTunnelARHopLspID))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopAddrType", mplsTunnelCHopAddrType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopIPAddr", mplsTunnelCHopIPAddr))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopIPPrefixLen", mplsTunnelCHopIPPrefixLen))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopAsNumber", mplsTunnelCHopAsNumber))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopAddrUnnum", mplsTunnelCHopAddrUnnum))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopLspID", mplsTunnelCHopLspID))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCHopType", mplsTunnelCHopType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPerfPackets", mplsTunnelPerfPackets))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPerfHCPackets", mplsTunnelPerfHCPackets))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPerfErrors", mplsTunnelPerfErrors))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPerfBytes", mplsTunnelPerfBytes))
	// taskEntry = append(taskEntry, genTask("mplsTunnelPerfHCBytes", mplsTunnelPerfHCBytes))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResMeanBurstSize", mplsTunnelCRLDPResMeanBurstSize))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResExBurstSize", mplsTunnelCRLDPResExBurstSize))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResFrequency", mplsTunnelCRLDPResFrequency))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResWeight", mplsTunnelCRLDPResWeight))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResFlags", mplsTunnelCRLDPResFlags))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResRowStatus", mplsTunnelCRLDPResRowStatus))
	// taskEntry = append(taskEntry, genTask("mplsTunnelCRLDPResStorageType", mplsTunnelCRLDPResStorageType))
	// taskEntry = append(taskEntry, genTask("mplsTunnelNotificationEnable", mplsTunnelNotificationEnable))
	// // ************** rfc3812 **************

	// // ************** rfc3814 **************
	// taskEntry = append(taskEntry, genTask("mplsFTNIndexNext", mplsFTNIndexNext))
	// taskEntry = append(taskEntry, genTask("mplsFTNTableLastChanged", mplsFTNTableLastChanged))
	// taskEntry = append(taskEntry, genTask("mplsFTNRowStatus", mplsFTNRowStatus))
	// taskEntry = append(taskEntry, genTask("mplsFTNDescr", mplsFTNDescr))
	// taskEntry = append(taskEntry, genTask("mplsFTNMask", mplsFTNMask))
	// taskEntry = append(taskEntry, genTask("mplsFTNAddrType", mplsFTNAddrType))
	// taskEntry = append(taskEntry, genTask("mplsFTNSourceAddrMin", mplsFTNSourceAddrMin))
	// taskEntry = append(taskEntry, genTask("mplsFTNSourceAddrMax", mplsFTNSourceAddrMax))
	// taskEntry = append(taskEntry, genTask("mplsFTNDestAddrMin", mplsFTNDestAddrMin))
	// taskEntry = append(taskEntry, genTask("mplsFTNDestAddrMax", mplsFTNDestAddrMax))
	// taskEntry = append(taskEntry, genTask("mplsFTNSourcePortMin", mplsFTNSourcePortMin))
	// taskEntry = append(taskEntry, genTask("mplsFTNSourcePortMax", mplsFTNSourcePortMax))
	// taskEntry = append(taskEntry, genTask("mplsFTNDestPortMin", mplsFTNDestPortMin))
	// taskEntry = append(taskEntry, genTask("mplsFTNDestPortMax", mplsFTNDestPortMax))
	// taskEntry = append(taskEntry, genTask("mplsFTNProtocol", mplsFTNProtocol))
	// taskEntry = append(taskEntry, genTask("mplsFTNDscp", mplsFTNDscp))
	// taskEntry = append(taskEntry, genTask("mplsFTNActionType", mplsFTNActionType))
	// taskEntry = append(taskEntry, genTask("mplsFTNActionPointer", mplsFTNActionPointer))
	// taskEntry = append(taskEntry, genTask("mplsFTNStorageType", mplsFTNStorageType))

	// taskEntry = append(taskEntry, genTask("mplsFTNMapTableLastChanged", mplsFTNMapTableLastChanged))
	// taskEntry = append(taskEntry, genTask("mplsFTNMapRowStatus", mplsFTNMapRowStatus))
	// taskEntry = append(taskEntry, genTask("mplsFTNMapStorageType", mplsFTNMapStorageType))
	// taskEntry = append(taskEntry, genTask("mplsFTNPerfMatchedPackets", mplsFTNPerfMatchedPackets))
	// taskEntry = append(taskEntry, genTask("mplsFTNPerfMatchedOctets", mplsFTNPerfMatchedOctets))
	// taskEntry = append(taskEntry, genTask("mplsFTNPerfDiscontinuityTime", mplsFTNPerfDiscontinuityTime))

	// ******************** rfc 3812-14

	// rfc4750 starts
	// taskEntry = append(taskEntry, genTask("ospfRouterID", ospfRouterID))
	// taskEntry = append(taskEntry, genTask("ospfAdminStat", ospfAdminStat))
	// taskEntry = append(taskEntry, genTask("ospfVersionNumber", ospfVersionNumber))
	// taskEntry = append(taskEntry, genTask("ospfAreaBdrRtrStatus", ospfAreaBdrRtrStatus))
	// taskEntry = append(taskEntry, genTask("ospfASBdrRtrStatus", ospfASBdrRtrStatus))
	// taskEntry = append(taskEntry, genTask("ospfExternLsaCount", ospfExternLsaCount))
	// taskEntry = append(taskEntry, genTask("ospfExternLsaCksumSum", ospfExternLsaCksumSum))
	// taskEntry = append(taskEntry, genTask("ospfTOSSupport", ospfTOSSupport))
	// taskEntry = append(taskEntry, genTask("ospfOriginateNewLsas", ospfOriginateNewLsas))
	// taskEntry = append(taskEntry, genTask("ospfRxNewLsas", ospfRxNewLsas))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbLimit", ospfExtLsdbLimit))
	// taskEntry = append(taskEntry, genTask("ospfMulticastExtensions", ospfMulticastExtensions))
	// taskEntry = append(taskEntry, genTask("ospfExitOverflowInterval", ospfExitOverflowInterval))
	// taskEntry = append(taskEntry, genTask("ospfDemandExtensions", ospfDemandExtensions))
	// taskEntry = append(taskEntry, genTask("ospfRFC1583Compatibility", ospfRFC1583Compatibility))
	// taskEntry = append(taskEntry, genTask("ospfOpaqueLsaSupport", ospfOpaqueLsaSupport))
	// taskEntry = append(taskEntry, genTask("ospfReferenceBandwidth", ospfReferenceBandwidth))
	// taskEntry = append(taskEntry, genTask("ospfRestartSupport", ospfRestartSupport))
	// taskEntry = append(taskEntry, genTask("ospfRestartInterval", ospfRestartInterval))
	// taskEntry = append(taskEntry, genTask("ospfRestartStrictLsaChecking", ospfRestartStrictLsaChecking))
	// taskEntry = append(taskEntry, genTask("ospfRestartStatus", ospfRestartStatus))
	// taskEntry = append(taskEntry, genTask("ospfRestartAge", ospfRestartAge))
	// taskEntry = append(taskEntry, genTask("ospfRestartExitReason", ospfRestartExitReason))
	// taskEntry = append(taskEntry, genTask("ospfAsLsaCount", ospfAsLsaCount))
	// taskEntry = append(taskEntry, genTask("ospfAsLsaCksumSum", ospfAsLsaCksumSum))
	// taskEntry = append(taskEntry, genTask("ospfStubRouterSupport", ospfStubRouterSupport))
	// taskEntry = append(taskEntry, genTask("ospfStubRouterAdvertisement", ospfStubRouterAdvertisement))
	// taskEntry = append(taskEntry, genTask("ospfDiscontinuityTime", ospfDiscontinuityTime))
	// taskEntry = append(taskEntry, genTask("ospfAreaID", ospfAreaID))
	// taskEntry = append(taskEntry, genTask("ospfAuthType", ospfAuthType))
	// taskEntry = append(taskEntry, genTask("ospfImportAsExtern", ospfImportAsExtern))
	// taskEntry = append(taskEntry, genTask("ospfSpfRuns", ospfSpfRuns))
	// taskEntry = append(taskEntry, genTask("ospfAreaBdrRtrCount", ospfAreaBdrRtrCount))
	// taskEntry = append(taskEntry, genTask("ospfAsBdrRtrCount", ospfAsBdrRtrCount))
	// taskEntry = append(taskEntry, genTask("ospfAreaLsaCount", ospfAreaLsaCount))
	// taskEntry = append(taskEntry, genTask("ospfAreaLsaCksumSum", ospfAreaLsaCksumSum))
	// taskEntry = append(taskEntry, genTask("ospfAreaSummary", ospfAreaSummary))
	// taskEntry = append(taskEntry, genTask("ospfAreaStatus", ospfAreaStatus))
	// taskEntry = append(taskEntry, genTask("ospfAreaNssaTranslatorRole", ospfAreaNssaTranslatorRole))
	// taskEntry = append(taskEntry, genTask("ospfAreaNssaTranslatorState", ospfAreaNssaTranslatorState))
	// taskEntry = append(taskEntry, genTask("ospfAreaNssaTranslatorStabilityInterval", ospfAreaNssaTranslatorStabilityInterval))
	// taskEntry = append(taskEntry, genTask("ospfAreaNssaTranslatorEvents", ospfAreaNssaTranslatorEvents))
	// taskEntry = append(taskEntry, genTask("ospfStubAreaID", ospfStubAreaID))
	// taskEntry = append(taskEntry, genTask("ospfStubTOS", ospfStubTOS))
	// taskEntry = append(taskEntry, genTask("ospfStubMetric", ospfStubMetric))
	// taskEntry = append(taskEntry, genTask("ospfStubStatus", ospfStubStatus))
	// taskEntry = append(taskEntry, genTask("ospfStubMetricType", ospfStubMetricType))
	// taskEntry = append(taskEntry, genTask("ospfLsdbAreaID", ospfLsdbAreaID))
	// taskEntry = append(taskEntry, genTask("ospfLsdbType", ospfLsdbType))
	// taskEntry = append(taskEntry, genTask("ospfLsdbLsid", ospfLsdbLsid))
	// taskEntry = append(taskEntry, genTask("ospfLsdbRouterID", ospfLsdbRouterID))
	// taskEntry = append(taskEntry, genTask("ospfLsdbSequence", ospfLsdbSequence))
	// taskEntry = append(taskEntry, genTask("ospfLsdbAge", ospfLsdbAge))
	// taskEntry = append(taskEntry, genTask("ospfLsdbChecksum", ospfLsdbChecksum))
	// taskEntry = append(taskEntry, genTask("ospfLsdbAdvertisement", ospfLsdbAdvertisement))
	// taskEntry = append(taskEntry, genTask("ospfAreaRangeAreaID", ospfAreaRangeAreaID))
	// taskEntry = append(taskEntry, genTask("ospfAreaRangeNet", ospfAreaRangeNet))
	// taskEntry = append(taskEntry, genTask("ospfAreaRangeMask", ospfAreaRangeMask))
	// taskEntry = append(taskEntry, genTask("ospfAreaRangeStatus", ospfAreaRangeStatus))
	// taskEntry = append(taskEntry, genTask("ospfAreaRangeEffect", ospfAreaRangeEffect))
	// taskEntry = append(taskEntry, genTask("ospfHostIPAddress", ospfHostIPAddress))
	// taskEntry = append(taskEntry, genTask("ospfHostTOS", ospfHostTOS))
	// taskEntry = append(taskEntry, genTask("ospfHostMetric", ospfHostMetric))
	// taskEntry = append(taskEntry, genTask("ospfHostStatus", ospfHostStatus))
	// taskEntry = append(taskEntry, genTask("ospfHostCfgAreaID", ospfHostCfgAreaID))
	// taskEntry = append(taskEntry, genTask("ospfIfIPAddress", ospfIfIPAddress))
	// taskEntry = append(taskEntry, genTask("ospfAddressLessIf", ospfAddressLessIf))
	// taskEntry = append(taskEntry, genTask("ospfIfAreaID", ospfIfAreaID))
	// taskEntry = append(taskEntry, genTask("ospfIfType", ospfIfType))
	// taskEntry = append(taskEntry, genTask("ospfIfAdminStat", ospfIfAdminStat))
	// taskEntry = append(taskEntry, genTask("ospfIfRtrPriority", ospfIfRtrPriority))
	// taskEntry = append(taskEntry, genTask("ospfIfTransitDelay", ospfIfTransitDelay))
	// taskEntry = append(taskEntry, genTask("ospfIfRetransInterval", ospfIfRetransInterval))
	// taskEntry = append(taskEntry, genTask("ospfIfHelloInterval", ospfIfHelloInterval))
	// taskEntry = append(taskEntry, genTask("ospfIfRtrDeadInterval", ospfIfRtrDeadInterval))
	// taskEntry = append(taskEntry, genTask("ospfIfPollInterval", ospfIfPollInterval))
	// taskEntry = append(taskEntry, genTask("ospfIfState", ospfIfState))
	// taskEntry = append(taskEntry, genTask("ospfIfDesignatedRouter", ospfIfDesignatedRouter))
	// taskEntry = append(taskEntry, genTask("ospfIfBackupDesignatedRouter", ospfIfBackupDesignatedRouter))
	// taskEntry = append(taskEntry, genTask("ospfIfEvents", ospfIfEvents))
	// taskEntry = append(taskEntry, genTask("ospfIfAuthKey", ospfIfAuthKey))
	// taskEntry = append(taskEntry, genTask("ospfIfStatus", ospfIfStatus))
	// taskEntry = append(taskEntry, genTask("ospfIfMulticastForwarding", ospfIfMulticastForwarding))
	// taskEntry = append(taskEntry, genTask("ospfIfDemand", ospfIfDemand))
	// taskEntry = append(taskEntry, genTask("ospfIfAuthType", ospfIfAuthType))
	// taskEntry = append(taskEntry, genTask("ospfIfLsaCount", ospfIfLsaCount))
	// taskEntry = append(taskEntry, genTask("ospfIfLsaCksumSum", ospfIfLsaCksumSum))
	// taskEntry = append(taskEntry, genTask("ospfIfDesignatedRouterID", ospfIfDesignatedRouterID))
	// taskEntry = append(taskEntry, genTask("ospfIfBackupDesignatedRouterID", ospfIfBackupDesignatedRouterID))
	// taskEntry = append(taskEntry, genTask("ospfIfMetricIPAddress", ospfIfMetricIPAddress))
	// taskEntry = append(taskEntry, genTask("ospfIfMetricAddressLessIf", ospfIfMetricAddressLessIf))
	// taskEntry = append(taskEntry, genTask("ospfIfMetricTOS", ospfIfMetricTOS))
	// taskEntry = append(taskEntry, genTask("ospfIfMetricValue", ospfIfMetricValue))
	// taskEntry = append(taskEntry, genTask("ospfIfMetricStatus", ospfIfMetricStatus))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfNeighbor", ospfVirtIfNeighbor))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfTransitDelay", ospfVirtIfTransitDelay))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfRetransInterval", ospfVirtIfRetransInterval))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfHelloInterval", ospfVirtIfHelloInterval))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfRtrDeadInterval", ospfVirtIfRtrDeadInterval))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfState", ospfVirtIfState))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfEvents", ospfVirtIfEvents))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfAuthKey", ospfVirtIfAuthKey))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfStatus", ospfVirtIfStatus))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfAuthType", ospfVirtIfAuthType))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfLsaCount", ospfVirtIfLsaCount))
	// taskEntry = append(taskEntry, genTask("ospfVirtIfLsaCksumSum", ospfVirtIfLsaCksumSum))
	// taskEntry = append(taskEntry, genTask("ospfNbrIPAddr", ospfNbrIPAddr))
	// taskEntry = append(taskEntry, genTask("ospfNbrAddressLessIndex", ospfNbrAddressLessIndex))
	// taskEntry = append(taskEntry, genTask("ospfNbrRtrID", ospfNbrRtrID))
	// taskEntry = append(taskEntry, genTask("ospfNbrOptions", ospfNbrOptions))
	// taskEntry = append(taskEntry, genTask("ospfNbrPriority", ospfNbrPriority))
	// taskEntry = append(taskEntry, genTask("ospfNbrState", ospfNbrState))
	// taskEntry = append(taskEntry, genTask("ospfNbrEvents", ospfNbrEvents))
	// taskEntry = append(taskEntry, genTask("ospfNbrLsRetransQLen", ospfNbrLsRetransQLen))
	// taskEntry = append(taskEntry, genTask("ospfNbmaNbrStatus", ospfNbmaNbrStatus))
	// taskEntry = append(taskEntry, genTask("ospfNbmaNbrPermanence", ospfNbmaNbrPermanence))
	// taskEntry = append(taskEntry, genTask("ospfNbrHelloSuppressed", ospfNbrHelloSuppressed))
	// taskEntry = append(taskEntry, genTask("ospfNbrRestartHelperStatus", ospfNbrRestartHelperStatus))
	// taskEntry = append(taskEntry, genTask("ospfNbrRestartHelperAge", ospfNbrRestartHelperAge))
	// taskEntry = append(taskEntry, genTask("ospfNbrRestartHelperExitReason", ospfNbrRestartHelperExitReason))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrArea", ospfVirtNbrArea))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrRtrID", ospfVirtNbrRtrID))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrIPAddr", ospfVirtNbrIPAddr))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrOptions", ospfVirtNbrOptions))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrState", ospfVirtNbrState))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrEvents", ospfVirtNbrEvents))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrLsRetransQLen", ospfVirtNbrLsRetransQLen))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrHelloSuppressed", ospfVirtNbrHelloSuppressed))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrRestartHelperStatus", ospfVirtNbrRestartHelperStatus))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrRestartHelperAge", ospfVirtNbrRestartHelperAge))
	// taskEntry = append(taskEntry, genTask("ospfVirtNbrRestartHelperExitReason", ospfVirtNbrRestartHelperExitReason))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbType", ospfExtLsdbType))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbLsid", ospfExtLsdbLsid))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbRouterID", ospfExtLsdbRouterID))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbSequence", ospfExtLsdbSequence))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbAge", ospfExtLsdbAge))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbChecksum", ospfExtLsdbChecksum))
	// taskEntry = append(taskEntry, genTask("ospfExtLsdbAdvertisement", ospfExtLsdbAdvertisement))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateAreaID", ospfAreaAggregateAreaID))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateLsdbType", ospfAreaAggregateLsdbType))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateNet", ospfAreaAggregateNet))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateMask", ospfAreaAggregateMask))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateStatus", ospfAreaAggregateStatus))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateEffect", ospfAreaAggregateEffect))
	// taskEntry = append(taskEntry, genTask("ospfAreaAggregateExtRouteTag", ospfAreaAggregateExtRouteTag))
	// taskEntry = append(taskEntry, genTask("ospfLocalLsdbSequence", ospfLocalLsdbSequence))
	// taskEntry = append(taskEntry, genTask("ospfLocalLsdbAge", ospfLocalLsdbAge))
	// taskEntry = append(taskEntry, genTask("ospfLocalLsdbChecksum", ospfLocalLsdbChecksum))
	// taskEntry = append(taskEntry, genTask("ospfLocalLsdbAdvertisement", ospfLocalLsdbAdvertisement))
	// taskEntry = append(taskEntry, genTask("ospfVirtLocalLsdbSequence", ospfVirtLocalLsdbSequence))
	// taskEntry = append(taskEntry, genTask("ospfVirtLocalLsdbAge", ospfVirtLocalLsdbAge))
	// taskEntry = append(taskEntry, genTask("ospfVirtLocalLsdbChecksum", ospfVirtLocalLsdbChecksum))
	// taskEntry = append(taskEntry, genTask("ospfVirtLocalLsdbAdvertisement", ospfVirtLocalLsdbAdvertisement))
	// taskEntry = append(taskEntry, genTask("ospfAsLsdbSequence", ospfAsLsdbSequence))
	// taskEntry = append(taskEntry, genTask("ospfAsLsdbAge", ospfAsLsdbAge))
	// taskEntry = append(taskEntry, genTask("ospfAsLsdbChecksum", ospfAsLsdbChecksum))
	// taskEntry = append(taskEntry, genTask("ospfAsLsdbAdvertisement", ospfAsLsdbAdvertisement))
	// taskEntry = append(taskEntry, genTask("ospfAreaLsaCountNumber", ospfAreaLsaCountNumber))
	// ************** rfc4750 ends **************

	// RFC 4318 starts
	// taskEntry = append(taskEntry, genTask("dot1dStpVersion", dot1dStpVersion))
	// taskEntry = append(taskEntry, genTask("dot1dStpTxHoldCount", dot1dStpTxHoldCount))
	// taskEntry = append(taskEntry, genTask("dot1dStpPortProtocolMigration", dot1dStpPortProtocolMigration))
	// taskEntry = append(taskEntry, genTask("dot1dStpPortAdminEdgePort", dot1dStpPortAdminEdgePort))
	// taskEntry = append(taskEntry, genTask("dot1dStpPortOperEdgePort", dot1dStpPortOperEdgePort))
	// taskEntry = append(taskEntry, genTask("dot1dStpPortAdminPointToPoint", dot1dStpPortAdminPointToPoint))
	// taskEntry = append(taskEntry, genTask("dot1dStpPortOperPointToPoint", dot1dStpPortOperPointToPoint))
	// taskEntry = append(taskEntry, genTask("dot1dStpPortAdminPathCost", dot1dStpPortAdminPathCost))

	// // no definition yet
	// taskEntry = append(taskEntry, genTask("rstpNotifications", rstpNotifications))
	// taskEntry = append(taskEntry, genTask("rstpObjects", rstpObjects))
	// RFC 4318 Ends

	// ************************* Private Mib start
	taskEntry = append(taskEntry, genTask("systemName", systemName))
	taskEntry = append(taskEntry, genTask("systemDescr", systemDescr))
	taskEntry = append(taskEntry, genTask("systemLocation", systemLocation))
	taskEntry = append(taskEntry, genTask("systemContact", systemContact))
	taskEntry = append(taskEntry, genTask("deviceTimeInfo", deviceTimeInfo))
	taskEntry = append(taskEntry, genTask("uptime", uptime))
	taskEntry = append(taskEntry, genTask("softwareVersion", softwareVersion))
	taskEntry = append(taskEntry, genTask("macAddressInfo", macAddressInfo))
	taskEntry = append(taskEntry, genTask("hardwareModel", hardwareModel))
	taskEntry = append(taskEntry, genTask("hardwareDescr", hardwareDescr))
	taskEntry = append(taskEntry, genTask("serialNum", serialNum))
	taskEntry = append(taskEntry, genTask("dhcpClientEnable", dhcpClientEnable))
	taskEntry = append(taskEntry, genTask("devIPAddress", devIPAddress))
	taskEntry = append(taskEntry, genTask("networkMask", networkMask))
	taskEntry = append(taskEntry, genTask("gateway", gateway))
	taskEntry = append(taskEntry, genTask("dns", dns))
	taskEntry = append(taskEntry, genTask("currentIPAddress", currentIPAddress))
	taskEntry = append(taskEntry, genTask("currentNetmask", currentNetmask))
	taskEntry = append(taskEntry, genTask("currentGateway", currentGateway))
	taskEntry = append(taskEntry, genTask("currentDNS", currentDNS))
	taskEntry = append(taskEntry, genTask("timeMethod", timeMethod))
	taskEntry = append(taskEntry, genTask("deviceManualTime", deviceManualTime))
	taskEntry = append(taskEntry, genTask("deviceTimeUTC", deviceTimeUTC))
	taskEntry = append(taskEntry, genTask("timezone", timezone))
	taskEntry = append(taskEntry, genTask("ntpServer", ntpServer))
	taskEntry = append(taskEntry, genTask("deviceVoltage", deviceVoltage))
	taskEntry = append(taskEntry, genTask("deviceCurrent", deviceCurrent))
	taskEntry = append(taskEntry, genTask("devicePower", devicePower))
	taskEntry = append(taskEntry, genTask("deviceTemperature", deviceTemperature))
	taskEntry = append(taskEntry, genTask("deviceCPUUsage", deviceCPUUsage))
	taskEntry = append(taskEntry, genTask("deviceRAMUsage", deviceRAMUsage))
	taskEntry = append(taskEntry, genTask("portIndex", portIndex))
	taskEntry = append(taskEntry, genTask("portType", portType))
	taskEntry = append(taskEntry, genTask("portDescr", portDescr))
	taskEntry = append(taskEntry, genTask("portEnabled", portEnabled))
	taskEntry = append(taskEntry, genTask("portFlowControlEnabled", portFlowControlEnabled))
	taskEntry = append(taskEntry, genTask("portSpeed", portSpeed))
	taskEntry = append(taskEntry, genTask("portStatusIndex", portStatusIndex))
	taskEntry = append(taskEntry, genTask("portLinkStatus", portLinkStatus))
	taskEntry = append(taskEntry, genTask("portCurrentEnabled", portCurrentEnabled))
	taskEntry = append(taskEntry, genTask("portCurrentFlowControlEnabled", portCurrentFlowControlEnabled))
	taskEntry = append(taskEntry, genTask("portCurrentSpeed", portCurrentSpeed))
	taskEntry = append(taskEntry, genTask("portTrafficIndex", portTrafficIndex))
	taskEntry = append(taskEntry, genTask("portTransmitting", portTransmitting))
	taskEntry = append(taskEntry, genTask("portReceiving", portReceiving))
	taskEntry = append(taskEntry, genTask("portErrorStatisticsIndex", portErrorStatisticsIndex))
	taskEntry = append(taskEntry, genTask("txMACErrorPacket", txMACErrorPacket))
	taskEntry = append(taskEntry, genTask("rxMACErrorPacket", rxMACErrorPacket))
	taskEntry = append(taskEntry, genTask("collision", collision))
	taskEntry = append(taskEntry, genTask("lateCollision", lateCollision))
	taskEntry = append(taskEntry, genTask("excessiveCollision", excessiveCollision))
	taskEntry = append(taskEntry, genTask("badCRCPacket", badCRCPacket))
	taskEntry = append(taskEntry, genTask("jabberPacket", jabberPacket))
	taskEntry = append(taskEntry, genTask("oversizePacket", oversizePacket))
	taskEntry = append(taskEntry, genTask("undersizePacket", undersizePacket))
	taskEntry = append(taskEntry, genTask("fragments", fragments))
	taskEntry = append(taskEntry, genTask("packetSentMultipleTimes", packetSentMultipleTimes))
	taskEntry = append(taskEntry, genTask("deferredSentFrames", deferredSentFrames))
	taskEntry = append(taskEntry, genTask("unknownControlFrames", unknownControlFrames))
	taskEntry = append(taskEntry, genTask("insufficientDropPacket", insufficientDropPacket))
	taskEntry = append(taskEntry, genTask("portFlowControlStatisticsIndex", portFlowControlStatisticsIndex))
	taskEntry = append(taskEntry, genTask("txFlowControlFrames", txFlowControlFrames))
	taskEntry = append(taskEntry, genTask("rxGoodFlowControlFrames", rxGoodFlowControlFrames))
	taskEntry = append(taskEntry, genTask("rxBadFlowControlFrames", rxBadFlowControlFrames))
	taskEntry = append(taskEntry, genTask("portCastTypeStatisticsIndex", portCastTypeStatisticsIndex))
	taskEntry = append(taskEntry, genTask("txGoodUnicastFrames", txGoodUnicastFrames))
	taskEntry = append(taskEntry, genTask("rxGoodUnicastFrames", rxGoodUnicastFrames))
	taskEntry = append(taskEntry, genTask("txBroadCastFrames", txBroadCastFrames))
	taskEntry = append(taskEntry, genTask("rxBroadCastFrames", rxBroadCastFrames))
	taskEntry = append(taskEntry, genTask("txMulticastFrames", txMulticastFrames))
	taskEntry = append(taskEntry, genTask("rxMulticastFrames", rxMulticastFrames))
	taskEntry = append(taskEntry, genTask("portPacketSizeStatisticsIndex", portPacketSizeStatisticsIndex))
	taskEntry = append(taskEntry, genTask("bytes64Packet", bytes64Packet))
	taskEntry = append(taskEntry, genTask("bytes65to127Packet", bytes65to127Packet))
	taskEntry = append(taskEntry, genTask("bytes128to255Packet", bytes128to255Packet))
	taskEntry = append(taskEntry, genTask("bytes256to511Packet", bytes256to511Packet))
	taskEntry = append(taskEntry, genTask("bytes512to1023Packet", bytes512to1023Packet))
	taskEntry = append(taskEntry, genTask("bytes1024toMAXPacket", bytes1024toMAXPacket))
	taskEntry = append(taskEntry, genTask("portBasicStatisticsIndex", portBasicStatisticsIndex))
	taskEntry = append(taskEntry, genTask("txGoodFrames", txGoodFrames))
	taskEntry = append(taskEntry, genTask("rxGoodFrames", rxGoodFrames))
	taskEntry = append(taskEntry, genTask("rxBadFrames", rxBadFrames))
	taskEntry = append(taskEntry, genTask("txGoodPackets", txGoodPackets))
	taskEntry = append(taskEntry, genTask("rxGoodPackets", rxGoodPackets))
	taskEntry = append(taskEntry, genTask("rxBadPackets", rxBadPackets))
	taskEntry = append(taskEntry, genTask("clearAllPortStatistics", clearAllPortStatistics))
	taskEntry = append(taskEntry, genTask("ingressCfg", ingressCfg))
	taskEntry = append(taskEntry, genTask("egressCfg", egressCfg))
	taskEntry = append(taskEntry, genTask("portRateLimitIndex", portRateLimitIndex))
	taskEntry = append(taskEntry, genTask("ingressLimitFrameType", ingressLimitFrameType))
	taskEntry = append(taskEntry, genTask("ingressBandwidthLimit", ingressBandwidthLimit))
	taskEntry = append(taskEntry, genTask("egressBandwidthLimit", egressBandwidthLimit))
	taskEntry = append(taskEntry, genTask("aggregationCfgGroupIndex", aggregationCfgGroupIndex))
	taskEntry = append(taskEntry, genTask("trunkingType", trunkingType))
	taskEntry = append(taskEntry, genTask("trunkingMembers", trunkingMembers))
	taskEntry = append(taskEntry, genTask("aggregationStatusGroupIndex", aggregationStatusGroupIndex))
	taskEntry = append(taskEntry, genTask("currentTrunkingType", currentTrunkingType))
	taskEntry = append(taskEntry, genTask("currentTrunkingMember", currentTrunkingMember))
	taskEntry = append(taskEntry, genTask("poeMaxPower", poeMaxPower))
	taskEntry = append(taskEntry, genTask("poeLegacyModeEnabled", poeLegacyModeEnabled))
	taskEntry = append(taskEntry, genTask("poeEnabled", poeEnabled))
	taskEntry = append(taskEntry, genTask("poePowerLimit", poePowerLimit))
	taskEntry = append(taskEntry, genTask("poeSchedulingEnabled", poeSchedulingEnabled))
	taskEntry = append(taskEntry, genTask("poeAliveDetectEnabled", poeAliveDetectEnabled))
	taskEntry = append(taskEntry, genTask("poeAliveDetectPingIP", poeAliveDetectPingIP))
	taskEntry = append(taskEntry, genTask("poeAliveDetectInterval", poeAliveDetectInterval))
	taskEntry = append(taskEntry, genTask("poeAliveDetectRetryCount", poeAliveDetectRetryCount))
	taskEntry = append(taskEntry, genTask("poeAliveDetectFailureAction", poeAliveDetectFailureAction))
	taskEntry = append(taskEntry, genTask("poeSchdulingSun", poeSchdulingSun))
	taskEntry = append(taskEntry, genTask("poeSchdulingMon", poeSchdulingMon))
	taskEntry = append(taskEntry, genTask("poeSchdulingTue", poeSchdulingTue))
	taskEntry = append(taskEntry, genTask("poeSchdulingWed", poeSchdulingWed))
	taskEntry = append(taskEntry, genTask("poeSchdulingThu", poeSchdulingThu))
	taskEntry = append(taskEntry, genTask("poeSchdulingFri", poeSchdulingFri))
	taskEntry = append(taskEntry, genTask("poeSchdulingSat", poeSchdulingSat))
	taskEntry = append(taskEntry, genTask("poeFirmwareVersion", poeFirmwareVersion))
	taskEntry = append(taskEntry, genTask("poePowerConsumption", poePowerConsumption))
	taskEntry = append(taskEntry, genTask("poePowerMainVoltage", poePowerMainVoltage))
	taskEntry = append(taskEntry, genTask("poePowerMainCurrent", poePowerMainCurrent))
	taskEntry = append(taskEntry, genTask("poePortEnabled", poePortEnabled))
	taskEntry = append(taskEntry, genTask("poePortLinked", poePortLinked))
	taskEntry = append(taskEntry, genTask("poePortState", poePortState))
	taskEntry = append(taskEntry, genTask("poePortTemperature", poePortTemperature))
	taskEntry = append(taskEntry, genTask("poePortCurrent", poePortCurrent))
	taskEntry = append(taskEntry, genTask("poePortPower", poePortPower))
	taskEntry = append(taskEntry, genTask("poePortDeterminedClass", poePortDeterminedClass))
	taskEntry = append(taskEntry, genTask("poeAliveDetectStatusEnabled", poeAliveDetectStatusEnabled))
	taskEntry = append(taskEntry, genTask("poeAliveDetectStatusPingIP", poeAliveDetectStatusPingIP))
	taskEntry = append(taskEntry, genTask("poeAliveDetectStatusPingResult", poeAliveDetectStatusPingResult))
	taskEntry = append(taskEntry, genTask("vlanMode", vlanMode))
	taskEntry = append(taskEntry, genTask("vlanDot1qGroupsAddCfg", vlanDot1qGroupsAddCfg))
	taskEntry = append(taskEntry, genTask("vlanDot1qGroupsDeleteCfg", vlanDot1qGroupsDeleteCfg))
	taskEntry = append(taskEntry, genTask("vlanDot1qGroupsCfgRow", vlanDot1qGroupsCfgRow))
	taskEntry = append(taskEntry, genTask("vlanDot1qGroupsName", vlanDot1qGroupsName))
	taskEntry = append(taskEntry, genTask("vlanDot1qGroupsPortMembers", vlanDot1qGroupsPortMembers))
	taskEntry = append(taskEntry, genTask("vlanDot1qGroupsPortMemberTags", vlanDot1qGroupsPortMemberTags))
	taskEntry = append(taskEntry, genTask("vlanDot1qPVID", vlanDot1qPVID))
	taskEntry = append(taskEntry, genTask("vlanDot1qAcceptableFrameType", vlanDot1qAcceptableFrameType))
	taskEntry = append(taskEntry, genTask("vlanDot1qManagementPermission", vlanDot1qManagementPermission))
	taskEntry = append(taskEntry, genTask("vlanDot1qGVRPEnabled", vlanDot1qGVRPEnabled))
	taskEntry = append(taskEntry, genTask("gvrpCurrentVlanID", gvrpCurrentVlanID))
	taskEntry = append(taskEntry, genTask("gvrpCurrentMembers", gvrpCurrentMembers))
	taskEntry = append(taskEntry, genTask("gvrpCurrentMembersCount", gvrpCurrentMembersCount))
	taskEntry = append(taskEntry, genTask("gvrpCurrentTaggedMembers", gvrpCurrentTaggedMembers))
	taskEntry = append(taskEntry, genTask("gvrpCurrentTaggedMembersCount", gvrpCurrentTaggedMembersCount))
	taskEntry = append(taskEntry, genTask("gvrpCurrentStatus", gvrpCurrentStatus))
	taskEntry = append(taskEntry, genTask("vlanPortBasedGroupsAddCfg", vlanPortBasedGroupsAddCfg))
	taskEntry = append(taskEntry, genTask("vlanPortBasedGroupsDeleteCfg", vlanPortBasedGroupsDeleteCfg))
	taskEntry = append(taskEntry, genTask("vlanPortBasedGroupsCfgRow", vlanPortBasedGroupsCfgRow))
	taskEntry = append(taskEntry, genTask("vlanPortBasedGroupsID", vlanPortBasedGroupsID))
	taskEntry = append(taskEntry, genTask("vlanPortBasedGroupsPortMembers", vlanPortBasedGroupsPortMembers))
	taskEntry = append(taskEntry, genTask("qosUseQueuingSchema", qosUseQueuingSchema))
	taskEntry = append(taskEntry, genTask("qosPriorityType", qosPriorityType))
	taskEntry = append(taskEntry, genTask("qosTrafficIndex", qosTrafficIndex))
	taskEntry = append(taskEntry, genTask("qosTrafficRatio", qosTrafficRatio))
	taskEntry = append(taskEntry, genTask("qosCosPriorityIndex", qosCosPriorityIndex))
	taskEntry = append(taskEntry, genTask("qosCosPriority", qosCosPriority))
	taskEntry = append(taskEntry, genTask("qosDscpPriorityIndex", qosDscpPriorityIndex))
	taskEntry = append(taskEntry, genTask("qosDscpPriority", qosDscpPriority))
	taskEntry = append(taskEntry, genTask("gmrpEnabled", gmrpEnabled))
	taskEntry = append(taskEntry, genTask("gmrpAddStaticCfg", gmrpAddStaticCfg))
	taskEntry = append(taskEntry, genTask("gmrpDeleteStaticCfg", gmrpDeleteStaticCfg))
	taskEntry = append(taskEntry, genTask("gmrpStaticCfgRow", gmrpStaticCfgRow))
	taskEntry = append(taskEntry, genTask("gmrpPortNumbers", gmrpPortNumbers))
	taskEntry = append(taskEntry, genTask("gmrpCurrentStaticPortNumbers", gmrpCurrentStaticPortNumbers))
	taskEntry = append(taskEntry, genTask("gmrpCurrentDynamicPortNumbers", gmrpCurrentDynamicPortNumbers))
	taskEntry = append(taskEntry, genTask("igmpQuerierEnabled", igmpQuerierEnabled))
	taskEntry = append(taskEntry, genTask("igmpQuerierVersion", igmpQuerierVersion))
	taskEntry = append(taskEntry, genTask("igmpSnoopingEnabled", igmpSnoopingEnabled))
	taskEntry = append(taskEntry, genTask("igmpUnregisterFloodingEnabled", igmpUnregisterFloodingEnabled))
	taskEntry = append(taskEntry, genTask("igmpFloodWellKnownMulticastTrafficEnabled", igmpFloodWellKnownMulticastTrafficEnabled))
	taskEntry = append(taskEntry, genTask("igmpPortIndex", igmpPortIndex))
	taskEntry = append(taskEntry, genTask("igmpRouterPortEnabled", igmpRouterPortEnabled))
	taskEntry = append(taskEntry, genTask("igmpFastLeaveEnabled", igmpFastLeaveEnabled))
	taskEntry = append(taskEntry, genTask("igmpStaticEntryAdd", igmpStaticEntryAdd))
	taskEntry = append(taskEntry, genTask("igmpStaticEntryDelete", igmpStaticEntryDelete))
	taskEntry = append(taskEntry, genTask("igmpStaticEntryRow", igmpStaticEntryRow))
	taskEntry = append(taskEntry, genTask("igmpStaticVlanID", igmpStaticVlanID))
	taskEntry = append(taskEntry, genTask("igmpStaticAddress", igmpStaticAddress))
	taskEntry = append(taskEntry, genTask("igmpStaticPortMembers", igmpStaticPortMembers))
	taskEntry = append(taskEntry, genTask("igmpRouterPortStatusPortNumber", igmpRouterPortStatusPortNumber))
	taskEntry = append(taskEntry, genTask("igmpRouterPortRole", igmpRouterPortRole))
	taskEntry = append(taskEntry, genTask("igmpGroupMulticastAddress", igmpGroupMulticastAddress))
	taskEntry = append(taskEntry, genTask("igmpGroupVlanID", igmpGroupVlanID))
	taskEntry = append(taskEntry, genTask("igmpGroupMembershipInterval", igmpGroupMembershipInterval))
	taskEntry = append(taskEntry, genTask("igmpStatisticsVlanID", igmpStatisticsVlanID))
	taskEntry = append(taskEntry, genTask("igmpStatisticsQuerierStatus", igmpStatisticsQuerierStatus))
	taskEntry = append(taskEntry, genTask("igmpStatisticsQuerierTransmitted", igmpStatisticsQuerierTransmitted))
	taskEntry = append(taskEntry, genTask("igmpStatisticsQuerierReceived", igmpStatisticsQuerierReceived))
	taskEntry = append(taskEntry, genTask("igmpStatisticsV1ReportsReceived", igmpStatisticsV1ReportsReceived))
	taskEntry = append(taskEntry, genTask("igmpStatisticsV2LeaveReceived", igmpStatisticsV2LeaveReceived))
	taskEntry = append(taskEntry, genTask("igmpStatisticsV2ReportsReceivedCount", igmpStatisticsV2ReportsReceivedCount))
	taskEntry = append(taskEntry, genTask("igmpStatisticsV3ReportsReceivedCount", igmpStatisticsV3ReportsReceivedCount))
	taskEntry = append(taskEntry, genTask("lldpEnabled", lldpEnabled))
	taskEntry = append(taskEntry, genTask("lldpTxInterval", lldpTxInterval))
	taskEntry = append(taskEntry, genTask("lldpLiveTime", lldpLiveTime))
	taskEntry = append(taskEntry, genTask("lldpPortIndex", lldpPortIndex))
	taskEntry = append(taskEntry, genTask("lldpModeValue", lldpModeValue))
	taskEntry = append(taskEntry, genTask("lldpNeighborLocalPort", lldpNeighborLocalPort))
	taskEntry = append(taskEntry, genTask("lldpNeighborChassisID", lldpNeighborChassisID))
	taskEntry = append(taskEntry, genTask("lldpNeighborRemotePort", lldpNeighborRemotePort))
	taskEntry = append(taskEntry, genTask("lldpNeighborPortDescr", lldpNeighborPortDescr))
	taskEntry = append(taskEntry, genTask("lldpNeighborSystemName", lldpNeighborSystemName))
	taskEntry = append(taskEntry, genTask("lldpNeighborSystemCapability", lldpNeighborSystemCapability))
	taskEntry = append(taskEntry, genTask("lldpNeighborManagementAddress", lldpNeighborManagementAddress))
	taskEntry = append(taskEntry, genTask("lldpStatisticEntryIndex", lldpStatisticEntryIndex))
	taskEntry = append(taskEntry, genTask("lldpNeighborsAgedOut", lldpNeighborsAgedOut))
	taskEntry = append(taskEntry, genTask("lldpNeighborsAdd", lldpNeighborsAdd))
	taskEntry = append(taskEntry, genTask("lldpNeighborsDelete", lldpNeighborsDelete))
	taskEntry = append(taskEntry, genTask("lldpNeighborsFramesDiscarded", lldpNeighborsFramesDiscarded))
	taskEntry = append(taskEntry, genTask("lldpNeighborsFramesReceivedInError", lldpNeighborsFramesReceivedInError))
	taskEntry = append(taskEntry, genTask("lldpNeighborsFramesIn", lldpNeighborsFramesIn))
	taskEntry = append(taskEntry, genTask("lldpNeighborsFramesOut", lldpNeighborsFramesOut))
	taskEntry = append(taskEntry, genTask("lldpNeighborsTLVsDiscarded", lldpNeighborsTLVsDiscarded))
	taskEntry = append(taskEntry, genTask("lldpNeighborsTLVsUnrecongnized", lldpNeighborsTLVsUnrecongnized))
	taskEntry = append(taskEntry, genTask("cdpEnabled", cdpEnabled))
	taskEntry = append(taskEntry, genTask("cdpUpdateTime", cdpUpdateTime))
	taskEntry = append(taskEntry, genTask("cdpHoldTime", cdpHoldTime))
	taskEntry = append(taskEntry, genTask("cdpTxPackets", cdpTxPackets))
	taskEntry = append(taskEntry, genTask("cdpRxPackets", cdpRxPackets))
	taskEntry = append(taskEntry, genTask("cdpClearPackets", cdpClearPackets))
	taskEntry = append(taskEntry, genTask("cdpLocalPort", cdpLocalPort))
	taskEntry = append(taskEntry, genTask("cdpVersion", cdpVersion))
	taskEntry = append(taskEntry, genTask("cdpDeviceID", cdpDeviceID))
	taskEntry = append(taskEntry, genTask("cdpRemotePortID", cdpRemotePortID))
	taskEntry = append(taskEntry, genTask("cdpRemotePlatform", cdpRemotePlatform))
	taskEntry = append(taskEntry, genTask("cdpRemoteSoftwareVersion", cdpRemoteSoftwareVersion))
	taskEntry = append(taskEntry, genTask("cdpAgeOutTTL", cdpAgeOutTTL))
	taskEntry = append(taskEntry, genTask("cdpRemoteAddress", cdpRemoteAddress))
	taskEntry = append(taskEntry, genTask("topoNodeMacAddress", topoNodeMacAddress))
	taskEntry = append(taskEntry, genTask("topoNodeIPAddress", topoNodeIPAddress))
	taskEntry = append(taskEntry, genTask("topoLinkIndex", topoLinkIndex))
	taskEntry = append(taskEntry, genTask("topoFromPortNum", topoFromPortNum))
	taskEntry = append(taskEntry, genTask("topoToMacAddress", topoToMacAddress))
	taskEntry = append(taskEntry, genTask("topoToPortNum", topoToPortNum))
	taskEntry = append(taskEntry, genTask("topoRingID", topoRingID))
	taskEntry = append(taskEntry, genTask("topoRingType", topoRingType))
	taskEntry = append(taskEntry, genTask("topoRingState", topoRingState))
	taskEntry = append(taskEntry, genTask("topoRingRole", topoRingRole))
	taskEntry = append(taskEntry, genTask("topoRingPort0", topoRingPort0))
	taskEntry = append(taskEntry, genTask("topoRingPort1", topoRingPort1))
	taskEntry = append(taskEntry, genTask("topoIsBlockingPort0", topoIsBlockingPort0))
	taskEntry = append(taskEntry, genTask("topoIsBlockingPort1", topoIsBlockingPort1))
	taskEntry = append(taskEntry, genTask("dhcpServerEnabled", dhcpServerEnabled))
	taskEntry = append(taskEntry, genTask("dhcpServerIPRangeFirst", dhcpServerIPRangeFirst))
	taskEntry = append(taskEntry, genTask("dhcpServerIPRangeLast", dhcpServerIPRangeLast))
	taskEntry = append(taskEntry, genTask("dhcpServerNetmask", dhcpServerNetmask))
	taskEntry = append(taskEntry, genTask("dhcpServerGateway", dhcpServerGateway))
	taskEntry = append(taskEntry, genTask("dhcpServerDNS", dhcpServerDNS))
	taskEntry = append(taskEntry, genTask("dhcpServerLeaseTime", dhcpServerLeaseTime))
	taskEntry = append(taskEntry, genTask("dhcpServerMacBasedAddCfg", dhcpServerMacBasedAddCfg))
	taskEntry = append(taskEntry, genTask("dhcpServerMacBasedDeleteCfg", dhcpServerMacBasedDeleteCfg))
	taskEntry = append(taskEntry, genTask("dhcpServerMacBasedCfgRow", dhcpServerMacBasedCfgRow))
	taskEntry = append(taskEntry, genTask("dhcpServerMacBasedID", dhcpServerMacBasedID))
	taskEntry = append(taskEntry, genTask("dhcpServerMacBasedIP", dhcpServerMacBasedIP))
	taskEntry = append(taskEntry, genTask("dhcpServerOption66ServerName", dhcpServerOption66ServerName))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82AddCfg", dhcpServerOption82AddCfg))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82DeleteCfg", dhcpServerOption82DeleteCfg))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82CfgRow", dhcpServerOption82CfgRow))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82RemoteID", dhcpServerOption82RemoteID))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82CircuitID", dhcpServerOption82CircuitID))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82IPFirst", dhcpServerOption82IPFirst))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82IPLast", dhcpServerOption82IPLast))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82Netmask", dhcpServerOption82Netmask))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82Gateway", dhcpServerOption82Gateway))
	taskEntry = append(taskEntry, genTask("dhcpServerOption82DNS", dhcpServerOption82DNS))
	taskEntry = append(taskEntry, genTask("dhcpServerOPtion82LeaseTime", dhcpServerOPtion82LeaseTime))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXEEnabled", dhcpServerOptionPXEEnabled))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXEAddCfg", dhcpServerOptionPXEAddCfg))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXEDeleteCfg", dhcpServerOptionPXEDeleteCfg))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfgRow", dhcpServerOptionPXECfgRow))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionAddPXEInfo", dhcpServerOptionAddPXEInfo))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionDeletePXEInfo", dhcpServerOptionDeletePXEInfo))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg1InfoIndex", dhcpServerOptionPXECfg1InfoIndex))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg1InfoTFTPServerName", dhcpServerOptionPXECfg1InfoTFTPServerName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg1InfoBootFileName", dhcpServerOptionPXECfg1InfoBootFileName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg1InfoSystemArchitecture", dhcpServerOptionPXECfg1InfoSystemArchitecture))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg1InfoTFTPServerIP", dhcpServerOptionPXECfg1InfoTFTPServerIP))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg2InfoIndex", dhcpServerOptionPXECfg2InfoIndex))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg2InfoTFTPServerName", dhcpServerOptionPXECfg2InfoTFTPServerName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg2InfoBootFileName", dhcpServerOptionPXECfg2InfoBootFileName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg2InfoSystemArchitecture", dhcpServerOptionPXECfg2InfoSystemArchitecture))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg2InfoTFTPServerIP", dhcpServerOptionPXECfg2InfoTFTPServerIP))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg3InfoIndex", dhcpServerOptionPXECfg3InfoIndex))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg3InfoTFTPServerName", dhcpServerOptionPXECfg3InfoTFTPServerName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg3InfoBootFileName", dhcpServerOptionPXECfg3InfoBootFileName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg3InfoSystemArchitecture", dhcpServerOptionPXECfg3InfoSystemArchitecture))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg3InfoTFTPServerIP", dhcpServerOptionPXECfg3InfoTFTPServerIP))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg4InfoIndex", dhcpServerOptionPXECfg4InfoIndex))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg4InfoTFTPServerName", dhcpServerOptionPXECfg4InfoTFTPServerName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg4InfoBootFileName", dhcpServerOptionPXECfg4InfoBootFileName))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg4InfoSystemArchitecture", dhcpServerOptionPXECfg4InfoSystemArchitecture))
	taskEntry = append(taskEntry, genTask("dhcpServerOptionPXECfg4InfoTFTPServerIP", dhcpServerOptionPXECfg4InfoTFTPServerIP))
	taskEntry = append(taskEntry, genTask("dhcpCurrentMacAddr", dhcpCurrentMacAddr))
	taskEntry = append(taskEntry, genTask("dhcpCurrentIPAddr", dhcpCurrentIPAddr))
	taskEntry = append(taskEntry, genTask("dhcpCurrentName", dhcpCurrentName))
	taskEntry = append(taskEntry, genTask("dhcpCurrentAvailableLeasedTime", dhcpCurrentAvailableLeasedTime))
	taskEntry = append(taskEntry, genTask("dhcpRelayCfgEnabled", dhcpRelayCfgEnabled))
	taskEntry = append(taskEntry, genTask("dhcpRelayCfgRemoteID", dhcpRelayCfgRemoteID))
	taskEntry = append(taskEntry, genTask("dhcpRelayServerVlanID", dhcpRelayServerVlanID))
	taskEntry = append(taskEntry, genTask("dhcpRelayServerIP", dhcpRelayServerIP))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsFromClient", dhcpRelayStatisticsFromClient))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsFromServer", dhcpRelayStatisticsFromServer))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsTxToClient", dhcpRelayStatisticsTxToClient))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsTxToClientError", dhcpRelayStatisticsTxToClientError))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsTxToServer", dhcpRelayStatisticsTxToServer))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsTxToServerError", dhcpRelayStatisticsTxToServerError))
	taskEntry = append(taskEntry, genTask("dhcpRelayStatisticsUnknown", dhcpRelayStatisticsUnknown))
	taskEntry = append(taskEntry, genTask("dhcpRelayServerPingStatus", dhcpRelayServerPingStatus))
	taskEntry = append(taskEntry, genTask("dhcpRelayCircuitPortNo", dhcpRelayCircuitPortNo))
	taskEntry = append(taskEntry, genTask("dhcpRelayCircuitID", dhcpRelayCircuitID))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingEnabled", dhcpSnoopingEnabled))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingPortNo", dhcpSnoopingPortNo))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingMode", dhcpSnoopingMode))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingInfoPortNo", dhcpSnoopingInfoPortNo))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingInfoMacAddr", dhcpSnoopingInfoMacAddr))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingInfoIpAddr", dhcpSnoopingInfoIpAddr))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingInfoLeaseTime", dhcpSnoopingInfoLeaseTime))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingInfoBindingType", dhcpSnoopingInfoBindingType))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingInfoVlanID", dhcpSnoopingInfoVlanID))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXPort", dhcpSnoopingRXPort))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXDiscover", dhcpSnoopingRXDiscover))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXOffer", dhcpSnoopingRXOffer))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXRequest", dhcpSnoopingRXRequest))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXDecline", dhcpSnoopingRXDecline))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXAck", dhcpSnoopingRXAck))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXNak", dhcpSnoopingRXNak))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXRelease", dhcpSnoopingRXRelease))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXInform", dhcpSnoopingRXInform))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXLeaseQuery", dhcpSnoopingRXLeaseQuery))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXLeaseUnassigned", dhcpSnoopingRXLeaseUnassigned))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXLeaseUnKnown", dhcpSnoopingRXLeaseUnKnown))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingRXLeaseActive", dhcpSnoopingRXLeaseActive))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXPort", dhcpSnoopingTXPort))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXDiscover", dhcpSnoopingTXDiscover))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXOffer", dhcpSnoopingTXOffer))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXRequest", dhcpSnoopingTXRequest))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXDecline", dhcpSnoopingTXDecline))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXAck", dhcpSnoopingTXAck))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXNak", dhcpSnoopingTXNak))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXRelease", dhcpSnoopingTXRelease))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXInform", dhcpSnoopingTXInform))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXLeaseQuery", dhcpSnoopingTXLeaseQuery))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXLeaseUnassigned", dhcpSnoopingTXLeaseUnassigned))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXLeaseUnKnown", dhcpSnoopingTXLeaseUnKnown))
	taskEntry = append(taskEntry, genTask("dhcpSnoopingTXLeaseActive", dhcpSnoopingTXLeaseActive))
	taskEntry = append(taskEntry, genTask("dhcpServerPortBasedIndex", dhcpServerPortBasedIndex))
	taskEntry = append(taskEntry, genTask("dhcpServerPortBasedIP", dhcpServerPortBasedIP))
	taskEntry = append(taskEntry, genTask("dhcpServerPortBasedNotOfferIP", dhcpServerPortBasedNotOfferIP))
	taskEntry = append(taskEntry, genTask("stpMode", stpMode))
	taskEntry = append(taskEntry, genTask("stpName", stpName))
	taskEntry = append(taskEntry, genTask("stpRevision", stpRevision))
	taskEntry = append(taskEntry, genTask("stpForwardDelay", stpForwardDelay))
	taskEntry = append(taskEntry, genTask("stpMaxAge", stpMaxAge))
	taskEntry = append(taskEntry, genTask("stpMaxHops", stpMaxHops))
	taskEntry = append(taskEntry, genTask("stpBridgePriority", stpBridgePriority))
	taskEntry = append(taskEntry, genTask("stpCISTPortIndex", stpCISTPortIndex))
	taskEntry = append(taskEntry, genTask("stpCISTEnabled", stpCISTEnabled))
	taskEntry = append(taskEntry, genTask("stpCISTPathCost", stpCISTPathCost))
	taskEntry = append(taskEntry, genTask("stpCISTPriority", stpCISTPriority))
	taskEntry = append(taskEntry, genTask("stpCISTEdgeMode", stpCISTEdgeMode))
	taskEntry = append(taskEntry, genTask("stpCISTP2PMode", stpCISTP2PMode))
	taskEntry = append(taskEntry, genTask("stpMSTIIndex", stpMSTIIndex))
	taskEntry = append(taskEntry, genTask("stpMSTIEnabled", stpMSTIEnabled))
	taskEntry = append(taskEntry, genTask("stpMSTIVlans", stpMSTIVlans))
	taskEntry = append(taskEntry, genTask("stpMSTIPriority", stpMSTIPriority))
	taskEntry = append(taskEntry, genTask("stpMSTIPortDetailIndex", stpMSTIPortDetailIndex))
	taskEntry = append(taskEntry, genTask("stpMSTIPortNo", stpMSTIPortNo))
	taskEntry = append(taskEntry, genTask("stpMSTIPortPathCost", stpMSTIPortPathCost))
	taskEntry = append(taskEntry, genTask("stpMSTIPortPriority", stpMSTIPortPriority))
	taskEntry = append(taskEntry, genTask("stpBridgeNo", stpBridgeNo))
	taskEntry = append(taskEntry, genTask("stpBridgeID", stpBridgeID))
	taskEntry = append(taskEntry, genTask("stpBridgeRootID", stpBridgeRootID))
	taskEntry = append(taskEntry, genTask("stpBridgeRootPort", stpBridgeRootPort))
	taskEntry = append(taskEntry, genTask("stpBridgeRootCost", stpBridgeRootCost))
	taskEntry = append(taskEntry, genTask("stpPortStatusPortIndex", stpPortStatusPortIndex))
	taskEntry = append(taskEntry, genTask("stpPortStatusCIST0", stpPortStatusCIST0))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI1", stpPortStatusMSTI1))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI2", stpPortStatusMSTI2))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI3", stpPortStatusMSTI3))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI4", stpPortStatusMSTI4))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI5", stpPortStatusMSTI5))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI6", stpPortStatusMSTI6))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI7", stpPortStatusMSTI7))
	taskEntry = append(taskEntry, genTask("stpPortStatusMSTI8", stpPortStatusMSTI8))
	taskEntry = append(taskEntry, genTask("loopProtectionEnable", loopProtectionEnable))
	taskEntry = append(taskEntry, genTask("loopProtectionEnableOnPorts", loopProtectionEnableOnPorts))
	taskEntry = append(taskEntry, genTask("loopProtectionInterval", loopProtectionInterval))
	taskEntry = append(taskEntry, genTask("loopProtectionShutDown", loopProtectionShutDown))
	taskEntry = append(taskEntry, genTask("loopProtectionPortIndex", loopProtectionPortIndex))
	taskEntry = append(taskEntry, genTask("loopProtectionIsLooping", loopProtectionIsLooping))
	taskEntry = append(taskEntry, genTask("loopProtectionLoopCounts", loopProtectionLoopCounts))
	taskEntry = append(taskEntry, genTask("loopProtectionLastLoopTime", loopProtectionLastLoopTime))
	taskEntry = append(taskEntry, genTask("dot8032RingMode", dot8032RingMode))
	taskEntry = append(taskEntry, genTask("dot8032AddCfg", dot8032AddCfg))
	taskEntry = append(taskEntry, genTask("dot8032DeleteCfg", dot8032DeleteCfg))
	taskEntry = append(taskEntry, genTask("dot8032CfgRow", dot8032CfgRow))
	taskEntry = append(taskEntry, genTask("dot8032RingID", dot8032RingID))
	taskEntry = append(taskEntry, genTask("dot8032RingEnabled", dot8032RingEnabled))
	taskEntry = append(taskEntry, genTask("dot8032RingRole", dot8032RingRole))
	taskEntry = append(taskEntry, genTask("dot8032RingType", dot8032RingType))
	taskEntry = append(taskEntry, genTask("dot8032RingPort0", dot8032RingPort0))
	taskEntry = append(taskEntry, genTask("dot8032RingPort1", dot8032RingPort1))
	taskEntry = append(taskEntry, genTask("dot8032NodeFailureProtection", dot8032NodeFailureProtection))
	taskEntry = append(taskEntry, genTask("dot8032DetectMiswiring", dot8032DetectMiswiring))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingID", dot8032CurrentRingID))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingEnabled", dot8032CurrentRingEnabled))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingState", dot8032CurrentRingState))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingRole", dot8032CurrentRingRole))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingType", dot8032CurrentRingType))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingPort0Status", dot8032CurrentRingPort0Status))
	taskEntry = append(taskEntry, genTask("dot8032CurrentRingPort1Status", dot8032CurrentRingPort1Status))
	taskEntry = append(taskEntry, genTask("dualHomingAddCfg", dualHomingAddCfg))
	taskEntry = append(taskEntry, genTask("dualHomingDeleteCfg", dualHomingDeleteCfg))
	taskEntry = append(taskEntry, genTask("dualHomingCfgRow", dualHomingCfgRow))
	taskEntry = append(taskEntry, genTask("dualHomingRingID", dualHomingRingID))
	taskEntry = append(taskEntry, genTask("dualHomingEnabled", dualHomingEnabled))
	taskEntry = append(taskEntry, genTask("dualHomingRole", dualHomingRole))
	taskEntry = append(taskEntry, genTask("dualHomingPort", dualHomingPort))
	taskEntry = append(taskEntry, genTask("dualHomingCurrentRingID", dualHomingCurrentRingID))
	taskEntry = append(taskEntry, genTask("dualHomingCurrentEnabled", dualHomingCurrentEnabled))
	taskEntry = append(taskEntry, genTask("dualHomingCurrentStatus", dualHomingCurrentStatus))
	taskEntry = append(taskEntry, genTask("dualHomingCurrentPort", dualHomingCurrentPort))
	taskEntry = append(taskEntry, genTask("dualHomingCurrentRole", dualHomingCurrentRole))
	taskEntry = append(taskEntry, genTask("mrpAddCfg", mrpAddCfg))
	taskEntry = append(taskEntry, genTask("mrpDeleteCfg", mrpDeleteCfg))
	taskEntry = append(taskEntry, genTask("mrpCfgRow", mrpCfgRow))
	taskEntry = append(taskEntry, genTask("mrpIndex", mrpIndex))
	taskEntry = append(taskEntry, genTask("mrpRole", mrpRole))
	taskEntry = append(taskEntry, genTask("mrpDomainID", mrpDomainID))
	taskEntry = append(taskEntry, genTask("mrpVlanID", mrpVlanID))
	taskEntry = append(taskEntry, genTask("mrpPrimaryPort", mrpPrimaryPort))
	taskEntry = append(taskEntry, genTask("mrpSecondaryPort", mrpSecondaryPort))
	taskEntry = append(taskEntry, genTask("mrpStatusIndex", mrpStatusIndex))
	taskEntry = append(taskEntry, genTask("mrpStatusRole", mrpStatusRole))
	taskEntry = append(taskEntry, genTask("mrpStatusDomainID", mrpStatusDomainID))
	taskEntry = append(taskEntry, genTask("mrpRoleState", mrpRoleState))
	taskEntry = append(taskEntry, genTask("mrpRingState", mrpRingState))
	taskEntry = append(taskEntry, genTask("mrpPrimaryPortState", mrpPrimaryPortState))
	taskEntry = append(taskEntry, genTask("mrpSecondaryPortState", mrpSecondaryPortState))
	taskEntry = append(taskEntry, genTask("mrpRingTransitionCount", mrpRingTransitionCount))
	taskEntry = append(taskEntry, genTask("staticMacAddressAddCfg", staticMacAddressAddCfg))
	taskEntry = append(taskEntry, genTask("staticMacAddressDeleteCfg", staticMacAddressDeleteCfg))
	taskEntry = append(taskEntry, genTask("staticMacAddressCfgRow", staticMacAddressCfgRow))
	taskEntry = append(taskEntry, genTask("staticMacAddressIndex", staticMacAddressIndex))
	taskEntry = append(taskEntry, genTask("staticMacAddress", staticMacAddress))
	taskEntry = append(taskEntry, genTask("staticMacAddressVlanID", staticMacAddressVlanID))
	taskEntry = append(taskEntry, genTask("staticMacAddressPort", staticMacAddressPort))
	taskEntry = append(taskEntry, genTask("macFilterAddCfg", macFilterAddCfg))
	taskEntry = append(taskEntry, genTask("macFilterDeleteCfg", macFilterDeleteCfg))
	taskEntry = append(taskEntry, genTask("macFilterCfgRow", macFilterCfgRow))
	taskEntry = append(taskEntry, genTask("macFilterEntryIndex", macFilterEntryIndex))
	taskEntry = append(taskEntry, genTask("macFilterMacAddress", macFilterMacAddress))
	taskEntry = append(taskEntry, genTask("macFilterVlanID", macFilterVlanID))
	taskEntry = append(taskEntry, genTask("allMACAddressVlanID", allMACAddressVlanID))
	taskEntry = append(taskEntry, genTask("allMACAddressType", allMACAddressType))
	taskEntry = append(taskEntry, genTask("allMACAddressValue", allMACAddressValue))
	taskEntry = append(taskEntry, genTask("allMACAddressPort", allMACAddressPort))
	taskEntry = append(taskEntry, genTask("accessControlAddCfg", accessControlAddCfg))
	taskEntry = append(taskEntry, genTask("accessControlDeleteCfg", accessControlDeleteCfg))
	taskEntry = append(taskEntry, genTask("accessControlCfgRow", accessControlCfgRow))
	taskEntry = append(taskEntry, genTask("accessControlIndex", accessControlIndex))
	taskEntry = append(taskEntry, genTask("accessControlDirection", accessControlDirection))
	taskEntry = append(taskEntry, genTask("accessControlLookupRule", accessControlLookupRule))
	taskEntry = append(taskEntry, genTask("accessControlIPProtocol", accessControlIPProtocol))
	taskEntry = append(taskEntry, genTask("accessControlSourceAddress", accessControlSourceAddress))
	taskEntry = append(taskEntry, genTask("accessControlSourceMask", accessControlSourceMask))
	taskEntry = append(taskEntry, genTask("accessControlSourcePort", accessControlSourcePort))
	taskEntry = append(taskEntry, genTask("accessControlDestinationAddress", accessControlDestinationAddress))
	taskEntry = append(taskEntry, genTask("accessControlDestinationMask", accessControlDestinationMask))
	taskEntry = append(taskEntry, genTask("accessControlDestinationPort", accessControlDestinationPort))
	taskEntry = append(taskEntry, genTask("accessControlPorts", accessControlPorts))
	taskEntry = append(taskEntry, genTask("accessControlAction", accessControlAction))
	taskEntry = append(taskEntry, genTask("eventDDMTableUpdateCfg", eventDDMTableUpdateCfg))
	taskEntry = append(taskEntry, genTask("eventDDMTableRowCfg", eventDDMTableRowCfg))
	taskEntry = append(taskEntry, genTask("eventDDMPortNo", eventDDMPortNo))
	taskEntry = append(taskEntry, genTask("eventDDMVoltageLower", eventDDMVoltageLower))
	taskEntry = append(taskEntry, genTask("eventDDMVoltageUpper", eventDDMVoltageUpper))
	taskEntry = append(taskEntry, genTask("eventDDMRxPowerLower", eventDDMRxPowerLower))
	taskEntry = append(taskEntry, genTask("eventDDMRxPowerUpper", eventDDMRxPowerUpper))
	taskEntry = append(taskEntry, genTask("eventDDMTxPowerLower", eventDDMTxPowerLower))
	taskEntry = append(taskEntry, genTask("eventDDMTxPowerUpper", eventDDMTxPowerUpper))
	taskEntry = append(taskEntry, genTask("eventDDMTxBiasLower", eventDDMTxBiasLower))
	taskEntry = append(taskEntry, genTask("eventDDMTxBiasUpper", eventDDMTxBiasUpper))
	taskEntry = append(taskEntry, genTask("eventDDMTemperatureLower", eventDDMTemperatureLower))
	taskEntry = append(taskEntry, genTask("eventDDMTemperatureUpper", eventDDMTemperatureUpper))
	taskEntry = append(taskEntry, genTask("eventMonitorVoltageLower", eventMonitorVoltageLower))
	taskEntry = append(taskEntry, genTask("eventMonitorVoltageUpper", eventMonitorVoltageUpper))
	taskEntry = append(taskEntry, genTask("eventMonitorPowerLower", eventMonitorPowerLower))
	taskEntry = append(taskEntry, genTask("eventMonitorPowerUpper", eventMonitorPowerUpper))
	taskEntry = append(taskEntry, genTask("eventMonitorCurrentLower", eventMonitorCurrentLower))
	taskEntry = append(taskEntry, genTask("eventMonitorCurrentUpper", eventMonitorCurrentUpper))
	taskEntry = append(taskEntry, genTask("eventMonitorTemperatureLower", eventMonitorTemperatureLower))
	taskEntry = append(taskEntry, genTask("eventMonitorTemparatureUpper", eventMonitorTemparatureUpper))
	taskEntry = append(taskEntry, genTask("eventDigitalInputIndex", eventDigitalInputIndex))
	taskEntry = append(taskEntry, genTask("eventDigitalInputCondition", eventDigitalInputCondition))
	taskEntry = append(taskEntry, genTask("eventDigitalInputDescr", eventDigitalInputDescr))
	taskEntry = append(taskEntry, genTask("remoteSystemLogAddCfg", remoteSystemLogAddCfg))
	taskEntry = append(taskEntry, genTask("remoteSystemLogDeleteCfg", remoteSystemLogDeleteCfg))
	taskEntry = append(taskEntry, genTask("remoteSystemLogCfgRow", remoteSystemLogCfgRow))
	taskEntry = append(taskEntry, genTask("remoteSystemLogCfgNum", remoteSystemLogCfgNum))
	taskEntry = append(taskEntry, genTask("remoteSystemLogHost", remoteSystemLogHost))
	taskEntry = append(taskEntry, genTask("remoteSystemLogTag", remoteSystemLogTag))
	taskEntry = append(taskEntry, genTask("remoteSystemLogFacility", remoteSystemLogFacility))
	taskEntry = append(taskEntry, genTask("emailCfg", emailCfg))
	taskEntry = append(taskEntry, genTask("emailReceiverAdd", emailReceiverAdd))
	taskEntry = append(taskEntry, genTask("emailReceiverDelete", emailReceiverDelete))
	taskEntry = append(taskEntry, genTask("emailReceiverCfgNum", emailReceiverCfgNum))
	taskEntry = append(taskEntry, genTask("emailReceiver", emailReceiver))
	taskEntry = append(taskEntry, genTask("smsUsername", smsUsername))
	taskEntry = append(taskEntry, genTask("smsPassword", smsPassword))
	taskEntry = append(taskEntry, genTask("smsPhoneNumberAdd", smsPhoneNumberAdd))
	taskEntry = append(taskEntry, genTask("smsPhoneNumberDelete", smsPhoneNumberDelete))
	taskEntry = append(taskEntry, genTask("smsPhoneNumberCfgIndex", smsPhoneNumberCfgIndex))
	taskEntry = append(taskEntry, genTask("smsPhoneNumber", smsPhoneNumber))
	taskEntry = append(taskEntry, genTask("doutCfgNum", doutCfgNum))
	taskEntry = append(taskEntry, genTask("doutAction", doutAction))
	taskEntry = append(taskEntry, genTask("doutStatus", doutStatus))
	taskEntry = append(taskEntry, genTask("testRelay", testRelay))
	taskEntry = append(taskEntry, genTask("authenticationSuccessEvent", authenticationSuccessEvent))
	taskEntry = append(taskEntry, genTask("authenticationFailedEvent", authenticationFailedEvent))
	taskEntry = append(taskEntry, genTask("deviceBootEvent", deviceBootEvent))
	taskEntry = append(taskEntry, genTask("ringTopologyChangeEvent", ringTopologyChangeEvent))
	taskEntry = append(taskEntry, genTask("poeDetectionFailedEvent", poeDetectionFailedEvent))
	taskEntry = append(taskEntry, genTask("hardWareMonitorEvent", hardWareMonitorEvent))
	taskEntry = append(taskEntry, genTask("ddmPortIndex", ddmPortIndex))
	taskEntry = append(taskEntry, genTask("ddmEventValue", ddmEventValue))
	taskEntry = append(taskEntry, genTask("diIndex", diIndex))
	taskEntry = append(taskEntry, genTask("diEventValue", diEventValue))
	taskEntry = append(taskEntry, genTask("powerIndex", powerIndex))
	taskEntry = append(taskEntry, genTask("powerOnEvent", powerOnEvent))
	taskEntry = append(taskEntry, genTask("powerOffEvent", powerOffEvent))
	taskEntry = append(taskEntry, genTask("linkChangePortIndex", linkChangePortIndex))
	taskEntry = append(taskEntry, genTask("linkUpEvent", linkUpEvent))
	taskEntry = append(taskEntry, genTask("linkDownEvent", linkDownEvent))
	taskEntry = append(taskEntry, genTask("enableLogs", enableLogs))
	taskEntry = append(taskEntry, genTask("logContent", logContent))
	taskEntry = append(taskEntry, genTask("arpTableMacAddress", arpTableMacAddress))
	taskEntry = append(taskEntry, genTask("arpTableIPAddr", arpTableIPAddr))
	taskEntry = append(taskEntry, genTask("ddmStatusPortNum", ddmStatusPortNum))
	taskEntry = append(taskEntry, genTask("ddmStatusPortType", ddmStatusPortType))
	taskEntry = append(taskEntry, genTask("ddmStatusLinked", ddmStatusLinked))
	taskEntry = append(taskEntry, genTask("ddmStatusPlugIn", ddmStatusPlugIn))
	taskEntry = append(taskEntry, genTask("ddmStatusSupportDDM", ddmStatusSupportDDM))
	taskEntry = append(taskEntry, genTask("ddmStatusTemperature", ddmStatusTemperature))
	taskEntry = append(taskEntry, genTask("ddmStatusVoltage", ddmStatusVoltage))
	taskEntry = append(taskEntry, genTask("ddmStatusTxBias", ddmStatusTxBias))
	taskEntry = append(taskEntry, genTask("ddmStatusTxPower", ddmStatusTxPower))
	taskEntry = append(taskEntry, genTask("ddmStatusRxPopwer", ddmStatusRxPopwer))
	taskEntry = append(taskEntry, genTask("saveConfiguration", saveConfiguration))
	taskEntry = append(taskEntry, genTask("resetDefault", resetDefault))
	taskEntry = append(taskEntry, genTask("upgradePath", upgradePath))
	taskEntry = append(taskEntry, genTask("upgradeImage", upgradeImage))
	taskEntry = append(taskEntry, genTask("reboot", reboot))
	// ************************* Private Mib End
	// here
}
